['객체지향의 사실과 오해' 학습 내용 정리]

6장 : 객체 지도

 어떤 문제의 해결책을 찾을 때, 이용할 수 있는 2가지 접근방법이 있다.
 1) 기능적이고 해결책 지향적인 접근법(Functional, solution-directed approach)
  ex) 누군가 길을 물었을 때, '말'로 하나 하나 설명해주는 방식
   -> 여기서 파생되는 결과물
      - 일반적(범용적)이지 않음(굉장히 개인화되고 주관적이 된 경험)
      - 재사용가능하지 않음

 2) 구조적이고 문제 지향적인 접근법(structural, problem-directed approach)
  ex) 누군가 길을 물었을 때, 주변 지형을 잘 표시한 '지도'를 주는 방식
   -> 여기서 파생되는 결과물
     - 범용적
     - 재가용 가능
     - 현재 목적 뿐 아닌 새로운 목적도 만족시키기 가능

  => 객체지향 개발 방법은 '구조적이고 문제 지향적인 접근법'과 같은 방식이다.
     객체지향 개발 방법은, 안정적인 '구조'에 빈번한 변경이 발생하는 '기능'을 종속시키는, 지도의 방법과 유사하다
     객체지향은 자주 변경되는 기능이 아닌, 안정적인 구조를 기반으로 시스템을 구조화한다.


 ▣ 기능 설계 대 구조 설계
  ■

 ▣ 두 가지 재료: 기능과 구조


 ▣ 안정적인 재료: 구조
   ■ 도메인 모델
   ■ 도메인 모습을 담을 수 있는 객체지향
   ■ 표현적 차이
   ■ 불안정한 기능을 담는 안정적인 도메인 모델


 ▣ 불안정한 재료: 기능
  ■ 유스케이스
   : 사용자와 시스템 간의 상호작용의 흐름을 텍스트로 정리한 것
   □ 유스케이스는 시스템의 '기능'을 표현해내기 위한 것이다
   □ 기능이란 것은 불안정하다, 즉 자주 변경이 된다, 언제든 변할 수 있다(가변적)
   □ 이 기능을 표현해놓기 위한 도구가 유스케이스

   <앨리스터 코오번(2000)>
   "유스케이스는 시스템의 이해관계자들 간의 계약을 행위 중심으로 파악한다."
   "유스케이스는 이해관계자들 중에서 일차 액터(Primary Actor)라 불리는 행위자의 요청에 대한 시스템의 응답으로서, 다양한 조건 하에 있는 시스템의 행위를 서술한다."
   "일차액터는 어떤 목표를 달성하기 위해 시스템과의 상호작용을 시작한다."
   "시스템은 모든 이해관계자들의 요구에 응답하고 이해관계를 보호해야 한다."
   "특별한 요청과 관계되는 조건에 따라 서로 다른 일련의 행위 혹은 시나리오가 전개될 수 있다."
   "유스케이스는 이렇게 서로 다른 시나리오를 묶어준다."

   *일차액터(Primary Actor)
   : 시스템의 서비스 중 하나를 요청하는 이해관계자
     - 하나의 목표를 가지고 유스케이스를 시작하는 액터(행위자)
     - 시스템과 연동하는 외부 시스템

  ■ 유스케이스의 가치
  : 유스케이스의 가치는 '사용자들의 목표를 중심'으로 시스템의 '기능'적인 요구사항들을 '이야기 형식'으로 묶을 수 있다는 것이다.
   - 산발적으로 흩어져 있는 기능들에 '사용자목표'라는 문맥을 제공 -> 유기적인 관계를 지닌 체계로 거듭남
   - 요구사항을 기억하고 관리하는데 드는 정신적 과부하를 줄임

   <마틴 파울러(2003)>
   "사용자 목표가 유스케이스의 핵심이다. 유스케이스는 공통의 사용자목표를 향해 강하게 연관된 시나리오의 집합이다."


  ■ 유스케이스의 특성
  ■ 유스케이스는 설계 기법도, 객체지향 기법도 아니다


 ▣ 재료 합치기: 기능과 구조와 통합
  ■ 도메인 모델, 유스케이스, 그리고 책임-주도 설계









