['객체지향의 사실과 오해' 학습 내용 정리]

7장 : 함께 모으기

 객체지향 설계 안에 존재하는 3가지 상호연관된 관점
  1) 개념 관점 : 사용자가 도메인을 바라보는 관점에 대한 것
  2) 명세 관점 : 객체의 인터페이스에 집중하는 관점
  3) 구현 관점 : 실제 코드 구현, 즉 구현부에 집중하는 관점

    개념관점, 명세관점, 구현관점은 동일한 클래스를 (만들 때) 세 가지 다른 방향에서 바라보는 것을 의미함
    (3가지 관점이라는 3가지 다른 각도의 안경을 통해 설계와 관련된 다양한 측면을 드러낼 수 있다)
     - 클래스가 은유하는 개념은 도메인 관점을 반영함
     - 클래스의 공용 인터페이스는 명세 관점을 반영함
     - 클래스의 속성과 메서드는 구현 관점을 반영함
     => 이런 것들이 클래스를 어떻게 설계해야 할지에 대해 '중요한 힌트' 를 제공하는 것.

  '클래스' 는 세가지 관점을 모두 수용할 수 있도록 개념, 인터페이스, 구현을 함께 드러내야 한다.
  동시에 코드 안에서 세 가지 관점을 쉽게 식별할 수 있도록 깔끔하게 분리해야 한다.


 ▣ 커피 전문점 도메인
  ■ 커피 주문
  ■ 커피 전문점이라는 세상


 ▣ 설계하고 구현하기
  ■ 커피를 주문하기 위한 협력 찾기
  ■ 인터페이스 정리하기
  ■ 구현하기


 ▣ 코드의 세 가지 관점
  ■ 코드는 세 가지 관점을 모두 제공해야 한다
   1) 개념 관점(Conceptual Perspective)
   2) 명세 관점(Specification Perspective)
   3) 구현 관점(Implementation Perspective)

  ■ 도메인 개념을 참조하는 이유
  : 도메인 개념 안에서 적절한 객체를 선택하는 것은, 코드의 구조와 의미를 쉽게 유추하고 이해할 수 있게 함 (도메인에 대한 지식을 기반으로 생각하면 직관적 이해가 가능해짐 -> 당연히 이해가 빠름)
   => 시스템의 '유지보수성' 에 매우 큰 도움을 줌

  ■ 인터페이스와 구현을 분리하라
   인터페이스가 구현 세부 사항을 노출하기 시작하면 아주 작은 변동에도 전체 협력이 요동치는 결과를 낳게 됨.
   이러한 이유로
    명세 관점은 클래스의 안정적인 측면(지속적으로 유지되는)을 드러내고
    구현 관점은 클래스의 불안정한 측면(가변적)을 드러내야 함
    -> 명세 관점과 구현관점이 분리되지 않고 뒤섞여 있어서 프로그래머의 유지보수 작업에 좋을 것이 하나도 없다.

    * 명세 관점(인터페이스 초점)의 중요성
    : 실제로 훌륭한 설계를 결정하는 측면은 명세관점인 객체의 인터페이스다.
    => "명세 관점으로 설계를 주도하면 설계의 품질이 향상될 수 있다."

   * 클래스를 보았을 때 클래스를 (특히나)명세 관점과 구현 관점으로 명확히 나눠볼 수 있어야 한다
    세 가지 관점으로 클래스 내용이 잘 비쳐지고 있을 때, 그 클래스는 훌륭한 클래스이다.






















