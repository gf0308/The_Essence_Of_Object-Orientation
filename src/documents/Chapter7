['객체지향의 사실과 오해' 학습 내용 정리]

7장 : 함께 모으기

 객체지향 설계 안에 존재하는 3가지 상호연관된 관점
  1) 개념 관점 : 사용자가 도메인을 바라보는 관점에 대한 것
  2) 명세 관점 : 객체의 인터페이스에 집중하는 관점
  3) 구현 관점 : 실제 코드 구현, 즉 구현부에 집중하는 관점

    개념관점, 명세관점, 구현관점은 동일한 클래스를 (만들 때) 세 가지 다른 방향에서 바라보는 것을 의미함
    (3가지 관점이라는 3가지 다른 각도의 안경을 통해 설계와 관련된 다양한 측면을 드러낼 수 있다)
     - 클래스가 은유하는 개념은 도메인 관점을 반영함
     - 클래스의 공용 인터페이스는 명세 관점을 반영함
     - 클래스의 속성과 메서드는 구현 관점을 반영함
     => 이런 것들이 클래스를 어떻게 설계해야 할지에 대해 '중요한 힌트' 를 제공하는 것.

  '클래스' 는 세가지 관점을 모두 수용할 수 있도록 개념, 인터페이스, 구현을 함께 드러내야 한다.
  동시에 코드 안에서 세 가지 관점을 쉽게 식별할 수 있도록 깔끔하게 분리해야 한다.


 ▣ 코드의 세 가지 관점
  ■ 코드는 세 가지 관점을 모두 제공해야 한다
   1) 개념 관점(Conceptual Perspective)
   2) 명세 관점(Specification Perspective)
   3) 구현 관점(Implementation Perspective)

  ■ 도메인 개념을 참조하는 이유
  : 도메인 개념 안에서 적절한 객체를 선택하는 것은, 코드의 구조와 의미를 쉽게 유추하고 이해할 수 있게 함 (도메인에 대한 지식을 기반으로 생각하면 직관적 이해가 가능해짐 -> 당연히 이해가 빠름)
   => 시스템의 '유지보수성' 에 매우 큰 도움을 줌

  ■ 인터페이스와 구현을 분리하라
   인터페이스가 구현 세부 사항을 노출하기 시작하면 아주 작은 변동에도 전체 협력이 요동치는 결과를 낳게 됨.
   이러한 이유로
    명세 관점은 클래스의 안정적인 측면(지속적으로 유지되는)을 드러내고
    구현 관점은 클래스의 불안정한 측면(가변적)을 드러내야 함
    -> 명세 관점과 구현관점이 분리되지 않고 뒤섞여 있어서 프로그래머의 유지보수 작업에 좋을 것이 하나도 없다.

    * 명세 관점(인터페이스 초점)의 중요성
    : 실제로 훌륭한 설계를 결정하는 측면은 명세관점인 객체의 인터페이스다.
    => "명세 관점으로 설계를 주도하면 설계의 품질이 향상될 수 있다."

   * 클래스를 보았을 때 클래스를 (특히나)명세 관점과 구현 관점으로 명확히 나눠볼 수 있어야 한다
    세 가지 관점으로 클래스 내용이 잘 비쳐지고 있을 때, 그 클래스는 훌륭한 클래스이다.


 ▣ 커피 전문점 도메인
  ■ 커피 주문
  ■ 커피 전문점이라는 세상


 ▣ 설계하고 구현하기
  ■ 커피를 주문하기 위한 협력 찾기

    * (협력과 객체를 설계할 때) 협력을 가시화하기 위해 흐름도를 그릴 때 UML 표준을 많이 사용한다.
      하지만, UML 표준 대로 꼭 지키면서 표기를 해나갈 필요는 없다.
      UML표준을 많이 사용하긴 하지만 침범불가의 엄격한 규칙은 아니란 것이다.
      의사소통이란 목적에 부합한다면 용도에 맞게 얼마든지 UML을 수정하고 뒤틀어도 된다.
      UML은 의사소통을 위한 일개 '표기법'이지 꼭 지켜야하는 법칙이 아니다. (그저 도구일 뿐이란 것이다)

  ■ 인터페이스 정리하기

  ■ 구현하기

   * 객체가 다른 객체와 소통하는 유일한 방법은 '메시지'를 보내는 것이다.
     그리고 객체가 다른 객체에게 메시지를 보내려면, 해당 '객체의 참조'가 먼저 필요하다.

   * 머리속으로 일단 어느정도 설계의 그림이 그려졌으면, 최대한 빨리 구현에 착수해서 코드로 구현을 진행한다.
     왜냐하면 "진짜로 설계가 완성되는 것은 구현을 해보면서 이루어지기 때문"이다.
     객체의 인터페이스는 구현 도중에 (얼마든지) 변경이 될 수 있다.
     구현 이전에 머리속으로만 구상한 설계는 (사실) 코드로 구현하는 단계에서 대부분 변경된다 (현실적으로 그렇게 되기 마련이다)
     설계작업은 구현을 위한 스케치를 작성하는 단계지 구현 그 자체일 수는 없다.
     중요한 것은 설계가 아니라 '코드'다.
     협력을 구상하는 단계에 너무 오래 머물지말고 최대한 빨리 코드를 구현해봐서 설계에 이상이 없는지, 이 설계가 구현가능한지를 판단해야 한다.
     코드를 통한 피드백 없이는 깔끔하고 제대로 된 설계를 얻을 수 없다.

       ** 실제로 협력의 설계가 완성되어져가는 과정
       - 일단 개략적으로 협력이 이뤄지는 시나리오를 그려보고
       - 역할들을 생각해내고 책임들을 확정짓고 객체들에게 책임을 부여한 다음
       - 그 시나리오와 상식대로 시스템이 전개되도록 각각의 코드를 구현해보면서
       - 구현하다보니 있어야 할 기능/상태 들을 그때 그때 추가해주면서, 설계를 완성해나간다
        => 이게 마무리가 되면, 설계가 완성되게 된다.
           실제로 코드로 적어보기 전까지는 (설계가 구현가능한지) 확실히 알 수 없다는 것이다.


   ■ 객체의 '인터페이스'와 '구현'을 깔끔하게 분리할 수 있는 기본적인 방법
    - 객체에게 책임을 할당하고 인터페이스를 결정할 때,
      가급적 객체 내부의 구현에 대해 어떠한 가정도 하지 않는다(의식적으로).
    - 객체가 어떠한 책임을 수행하는지 결정한 후에,
      책임을 수행하는데 필요한 객체의 속성을 결정한다.


 ▣ 코드와 세 가지 관점
  ■ 코드는 세 가지 관점을 모두 제공해야 한다
    1) 개념 관점 : 사용자의 머리속의 개념(도메인을 구성하는 중요 개념과 개념간의 관계)을 바라보는 관점
                  -> 소프트웨어 클래스가 도메인 개념의 특성을 최대한 받아들이고 있으면(즉 개념관점에서 봤을 때 훌륭하면), 변경(추가/수정)을 관리하기도 쉽고 유지보수성이 뛰어나다.
    2) 명세 관점 : 클래스의 인터페이스를 바라보는 관점
                  -> 공용 인터페이스는 외부의 객체가 접근할 수 있는 유익한 부분으로, 수정이 일어나면 협력을 맺고 있는 전 객체에게 영향이 가게 된다, 그러므로 객체의 인터페이스는 수정하기가 어려움
                  --> 그러므로 변화가 자주 일어나는 '구현부분'을 인터페이스에 최대한 묻히지 않도록, 내부구현과 관련된 부분이 인터페이스에 드러나지 않도록 함으로써(인터페이스와 구현의 분리 원칙) 변화가 있다고 영향받지 않는(변화에 탄력적인) 인터페이스를 만들어야 함
    3) 구현 관점 : 클래스의 내부 구현(속성,메서드)을 바라보는 관점
                  -> 내부구현에 해당하는 속성과 메서드는 클래스 내부로 철저하게 캡슐화(은닉)되어야 함. (외부 객체에게 노출되어선[영향을 미칠수있어선] 안되므로)

    => 정리하자면 좋은 객체지향 코드란(좋은 객체지향 애플리케이션),
       한 코드를 개념관점/명세관점/구현관점으로 봤을 때 3가지 관점 모두에서 흠잡을 데 없이 적절한 코드다.
       즉 3가지 관점을 모두 만족시키는 코드가 좋은 객체지향 코드라는 것이다.

  ■ 도메인 개념을 참조하는 이유
   도메인 개념을 참조한다는 것은, 애플리케이션의 객체를 설계하고 만들 때 도메인 개념으로부터 가져오는 '이름/행동' 등을 이용하는 것을 말한다.
   - 이렇게 하는 것은 "도메인에 대한 지식을 기반으로 코드의 구조와 의미를 쉽게 유추할 수있게 한다."
   - 그리고 이것은 시스템의 유지보수성에 큰 이익을 준다.
    -> 시스템을 쉽게 파악할 수 있다는 건 시스템에 추가/수정 등의 변경을 위한 작업을 할 때도 유리하단 것
    --> 따라서, "소프트웨어 클래스가 도메인 개념을 따르면 변화에 쉽게 대응할 수 있다."

  ■ 인터페이스와 구현을 분리하라
  : 명세관점은 클래스의 안정적인(지속적) 측면을 드러내야 함
    구현관점은 클래스의 불안정한(가변적) 측면을 드러내야 함
    인터페이스가 구현 세부 사항을 노출하기 시작하면, 아주 작은 변동이 일어나도 전체 협력이 요동치는 취약한 태생을(설계) 가질 수 밖에 없게 된다.

   "개념관점과 명세관점 사이는 그리 중요하지 않은 경우가 많지만, 명세관점과 구현관점을 분리하는 것은 매우 중요하다(Fowler 1999)"

   실제로 훌륭한 객체지향 설계를 결정하는 측면은 '명세 관점'인 객체의 인터페이스다.
   -> 명세관점이 설계를 주도하게 되면 설계의 품질이 향상될 수 있다.
    (명세관점 -> 인터페이스에 관한 것 -> 인터페이스 -> '메시지' -> "메시지를 중심으로 설계를 이끌어가기" -> 좋은 객체지향 설계의 기본원칙)

    클래스를 봤을 때 명세 관점과 구현 관점으로 나눠볼 수 있어야 한다.





















