['객체지향의 사실과 오해' 학습 내용 정리]

4장 : 역할, 책임, 협력

 인간 세계에서 사람의 어떤 행동이 '적절한' 지 결정하는 것은, 그 장소/시간/상황 과 같은 문맥(context) 이다.
 문맥에 따라 사람의 행동이 적절한 행동인가 결정되어 진다.

 인간세계와 마찬가지로 객체의 세계에서도 문맥(context)에 의해 행동이 적절한가가 결정이 되어진다.
 객체의 세계에서 객체의 행동 방식을 결정하는 것은 '협력' 이라는 문맥(context) 이다.
  - 중요한 것은 개별 객체가 아니라 객체들 사이에 이뤄지는 협력
  - 객체지향 설계의 전체적 품질을 결정하는 것은 개별 객체의 품질이 아니라 여러 객체들이 모여 이뤄내는 협력의 품질
  - 훌륭한 객체지향 설계는 객체들 간의 요청과 응답속에서 창발하는 '협력에 초점을 맞춰 애플리케이션을 설계하는 것'
  - 협력이 자리를 잡으면 저절로 객체의 행동이 드러나고, 뒤이어 적절한 객체의 상태도 결정됨
    (객체가 어떻게 행동해야 하는지 자연스럽게 드러남)  (해당 행위를 수행하기 위해 갖고있어야 할 데이터(상태)도 결정됨)

 # 객체의 모양을 빚는 것은 객체가 참여하는 협력이다
  - '어떤 협력에 참여하는지' 가 객체에 필요한 행동을 결정
  - '필요한 행동' 이 객체의 상태(데이터)를 결정

  => 개별적인 객체의 행동/상태가 아니라 객체들 간의 '협력' 에 집중할 것














  =========

  # 객체지향의 객체 설계 프로세스
  1. '협력' 고민
   - 무슨 시나리오 인 것인가?
   - 이 시나리오를 위해 무슨 협력이 이뤄져야 하나?
   - 협력에 참여하는 객체들은 무엇무엇인가?

  2. '책임' 고민
   - 협력에 참여하는 객체들의 각 책임은 무엇인가? (객체들이 주고받을 요청/응답의 흐름 => 외부에 제공할 '행동'이 됨)

  3. '데이터' 고민
   - (앞에서 정의된) 행동을 수행하는데 갖고 있어야 하는 필요한 데이터(상태)는 무엇인가? => 데이터와 행동이 어느정도 정의 됨

  4. '클래스' 고민
   - 위에서 정의된 행동과 데이터를 가진 클래스의 구현 방법을 고민


▣ 객체지향 설계 기법

 객체지향 애플리케이션 설계기법
  : 역할, 책임, 협력의 관점에서 객체지향 설계를 하는 3가지 기법이 있다.
   - 책임-주도 설계(Responsibility-Driven Design)
   - 디자인 패턴(Design Pattern)
   - 테스트-주도 개발(Test-Driven Development)

  1. 책임-주도 설계(Responsibility-Driven Design)
   : '협력'에 필요한 '책임'들을 '식별'하고 이 책임에 적합한 '객체'에게 '책임을 할당'하는 방식으로 애플리케이션을 설계하는 것
   -> 이에 따라 설계를 할 때 자연스럽게 흘러가는 사고의 흐름 : "무슨 협력이 일어나고, 무슨 역할들이 존재하며, 각 역할 별 책임은 무엇이 되지? 그리고 이 책임을 질 객체는 무엇으로 하지?"

  2. 디자인 패턴(Design Pattern)
   : 한마디로 하면 전문가들이 반복적으로 사용하는 해결방법을 정의해놓은 '설계 템플릿의 모음'
     -> 패턴은 전문가들이 특정 문제를 해결하기 위해 '이미 식별해놓은 역할, 책임, 협력의 모음' 인 것이다.
       (특정 디자인 패턴을 채택해서 그 패턴대로 개발을 하면, 그 디자인 패턴이 이미 갖고(보유하고) 있는 '협력','역할','책임' 을 바로 이용할 수 있다)

  3. 테스트-주도 개발(Test-Driven Development)
   : 한마디로 테스트를 먼저 작성하고 테스트를 통과하는 구체적인 코드를 추가하면서 애플리케이션을 완성해가는 방식
    - 테스트주도개발은 '테스트가 아니라 설계를 위한 기법' 이다.
    - TDD의 핵심은 테스트 작성이 아니다,
      핵심은 '구체적인 코드를 작성해나가면서 역할, 책임, 협력을 식별'하고, '식별된 역할, 책임, 협력이 적절한지 (테스트를 하면서) 피드백받는 것' 이다.
      



