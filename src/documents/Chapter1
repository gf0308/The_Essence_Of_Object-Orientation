['객체지향의 사실과 오해' 학습 내용 정리]

1장 : 협력하는 객체들의 공동체

▣ 객체지향

 *'객체지향' 프로그래밍이란 : 각 '객체'들이 자신이 가진 '역할'과 그에 따른 '책임'을 정확히 수행함으로써,
                            공동의 목표( : 프로그램[애플리케이션] 자신의 기능(애플리케이션 기능))를 완성해내는 원리로
                            프로그램이 구현되도록 하는 방식이다.
                          -> 각 객체들이 자기 몫을 정확히 잘 수행해내며, 그 속에서 서로 '요청-응답' 이란 상호작용을 함으로써
                             그 결과로 하나 하나 생겨나는 프로그램기능(: 기능부품)들이 차곡차곡 레고처럼 쌓이고,
                             이렇게 유기적으로 구축되어가면서 최종적으로 완성된 애플리케이션 기능이 구현되어지도록 하는 것이
                             '객체지향'인 것이다.

 ■ 객체지향에 대한 일반적인 통념, 그리고 오해와 사실
  □ 흔히 객체지향은 실세계를 모방하는 것, '현실세계에 대한 사물의 추상화'라는 설명이 있다.
    사실 이는 객체지향의 기반을 이루는 철학적인 개념을 설명하는 데는 적합하지만, 유연하고 실용적인 관점에서
    객체지향 분석, 설계를 설명하기에는 적합하지 않다.
    왜냐하면 애플리케이션을 개발하면서 객체에 직접적으로 대응되는 실세계의 사물을 발견할 확률은 그다지 높지 않기 때문이다.
    (심지어 그런 객체가 존재한다고 해도 객체와 사물 간의 개념적 거리는 유사성을 찾기 어려울 정도로 매우 먼 것이 일반적이다)

  □ '객체지향의 목표'는 사실 '실세계를 모방하는 것이 아니다, 오히려 새로운 세계를 창조하는 것' 이다.
     단순히 실세계를 소프트웨어 안으로 옮겨 담는 것이 아니라, '고객과 사용자를 만족시킬 수 있는 신세계를 창조하는 것'인 것이다.

  □ 이러한 숨은 사실에도 불구하고 객체지향이 '실세계의 모방'이라는 비유가 흔히 쓰이는 이유는 다음과 같은 장점이 있기 때문이다
    : "실세계에 대한 비유가 객체지향의 다양한 측면을 이해하고 학습하는 데 매우 효과적이기 때문" 이다.

      - '객체'를 '스스로 생각하고 스스로 결정하는 현실 세계의 생명체'에 비유하는 것은
        상태(변수)와 행위(함수)를 '캡슐화(Encapsulation)'하는 소프트웨어 객체의 '자율성(autonomous)'을 설명하는 데 효과적이다.
      - '현실 세계의 사람들'이 '암묵적 약속과 명시적인 계약을 기반으로 협력'하며 목표를 달성해나가는 과정은
        '메세지(message)'를 주고받으며 공동의 목표를 달성하기 위해 '협력(collaboration)'하는 객체들의 관계를 설명하는데 적합하다.
      - 실세계의 사물을 기반으로 소프트웨어 객체를 식별하고 구현까지 이어간다는 개념은
        객체지향 설계의 핵심 사상인 '연결완전성(seamlessness)'을 설명하는 데 적합한 틀을 제공한다.

  => 정리 : 실세계의 모방이라는 객체지향의 개념은 훌륭한 프로그램을 설계하고 구현하는 실무적인 관점에서는 부적합하지만,
            객체지향이라는 용어에 담긴 기본 사상을 이해하고 학습하는 데는 매우 효과적이다.
            -> 이러한 이유로 인해 "실세계의 모방"이라는 설명이 100% 정확하고 항상 합당한 설명이 아님에도 불구하고,
               많이 회자되고 비유로서 사용되는 것이다.


 ■ 객체지향의 가장 핵심적인 개념 : '역할(Role)','책임(Responsibility)','협력(Collaboration)'

   예시 ex) 한 직장인이 출근길 카페에 들려 커피를 주문해서 커피를 얻기까지의 한 싸이클(기능)
            : 위의 case 한 건, 즉 "직장인 A가 카페에서 커피 한잔을 주문해 커피를 얻는다" 는 케이스 한 건이 완료되는 것
               = '애플리케이션 기능' 하나가 완수되고 끝남
      - 등장인물: 직장인A, 주문받는 캐시어 B, 주문을 받고 커피를 제조하는 바리스타 C => 객체들
      - 각 객체들의 역할:
          -- 직장인 A : 커피를 고르고 주문한다, 진동벨이 울리면 커피를 수령한다.
          -- 캐시어 B : 고객으로부터 주문을 받고 계산한 다음, 테이크아웃커피잔에 커피명을 적고 바리스타 쪽 라인에 올린다,
                        커피가 다 만들어지면 진동벨을 울리고 고객에게 넘긴다.
          -- 바리스타 C : 커피잔에 적히 커피명을 보고 커피를 제조한 다음, 커피잔에 담아서 캐시어에게 다시 준다.
      - 위의 '커피 한잔을 주문하고, 주문을 받고 생산해서, 고객에게 제공하는' 한 싸이클이 완수되기 까지
        모든 과정 속에서 손님,캐시어,바리스타 사이의 암묵적인 '협력 관계'가 존재한다.
        위의 과정이 모두 정상적으로 이루어지기까지 각 주체가 자신의 역할을 다하고 있는 것 자체가 '협력'을 이루고 있는 것이다.
        그리고 이 협력이 이루어지는 상황 속 각 주체는 자신의 역할을 수행하는 과정에서 맡은 바 '책임'을 다한다.
      - 이 케이스에서 각 주체가 자신의 역할을 끝낼 때는 각각
         -- A : 커피를 받아들고 나갈 때
         -- B : 제조된 커피를 고객에게 제공하고 인사할 때
         -- C : 커피를 제조해 캐시어에게 넘겨줄 때
         각 주체들은 각자의 역할을 끝낸다.
         -> 각 주체가 각자의 역할을 다 마쳤을 때 커피주문이라 불리는 협력관계는 깔금하게 마무리 된다.


 ■ 요청과 응답으로 구성된 협력
  - 사람들은 스스로 해결하지못하는 문제와 마주치면 문제 해결에 필요한 지식을 갖고 있거나 서비스를 제공해줄 수 있는 사람에게 도움을 '요청'한다.
    이처럼 객체도 자신의 일을 처리하기 위해 필요한 것을 '요청(request)'하게 된다. -> 이게 request 이다
  - 일반적으로 하나의 문제를 해결하기 위해 다수의 사람 혹은 역할이 필요하기 때문에 한 사람에 대한 요청이 또 다른 사람에 대한 요청을 유발하는 것이 일반적이다.
    따라서 "요청은 연쇄적으로 발생"한다.
  - 요청을 받은 사람은 주어진 책임을 다하면서 필요한 지식이나 서비스를 제공한다. 즉 다른 사람의 요청에 '응답(response)'한다. -> 이게 response 이다
    요청이 연이어 발생하듯 이에 따른 응답 역시 요청의 방향과 반대 방향으로 연쇄적으로 (리턴되어) 전달된다.
  - 이렇게 요청과 응답을 통해 '협력(collaboration)'이 일어나게 되고 그 결과 일(문제)이 해결이 되어진다.

  => 요청과 응답을 통해 다른 사람과 협력을 이루면서 인간은 (혼자서는 처리할 수 없는) 거대하고 복잡한 문제를 해결할 수 있는 공동체를 형성할 수 있게 된다.
     '협력의 성공(그리고 그 결과 문제의 해결)'은 특정한 역할을 맡은 '각 개인(객체)이 얼마나 요청을 성실히(그리고 정확히) 이행하는가' 에 달려 있다.


 ■ 역할과 책임
  □ 역할이라는 단어는 의미적으로 책임이라는 개념을 내포한다
    특정한 역할은 특정한 책임을 암시한다
  □ 역할과 책임은 협력이 원활하게 진행되는 데 필요한 핵심적인 구성 요소다
  □ 각 사람(객체)가 '역할'과 '책임'을 수행하며 '협력'을 이루어가는 과정에서는 다음과 같은 특징적 개념들이 존재한다.
    ▶ '여러 사람(객체)가 동일한 역할을 수행할 수 있다'
       : 객체A가 수행하던 역할인 '역할 A'는 다른 객체에 의해 수행되어도 상관이 없다, 다른 객체 B가 수행하더라도, 모로 가도 '역할 A'가 수행되어지기만 하면 된다.
    ▶ '역할은 대체 가능성을 의미한다.'
       : 요청자(Requester) 입장에서 응답자(Responder)가 누구인지는 상관이 없다, 그저 얻어져야할 응답(response)만 제대로 얻어지면 된다, 따라서 어떤 사람(객체)가 요청을 수행하더라도 문제가 되지 않으므로 대체가능하다.
    ▶ '책임을 수행하는 방법은 자율적으로 선택할 수 있다.'
       : 요청을 받아 수행하는 사람(객체)는 이를 처리하는 방법을 자율적으로 선택할 수 있다, 즉 요청을 받는 사람(객체) 마다 자기만의 독특한 스타일대로 처리할 수 있다는 것이다,
         이처럼 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 '다형성(Polymorphism)' 이라고 한다.
    ▶ '한 사람(객체)이 동시에 여러 역할을 수행할 수 있다.'
       : 출근길에 커피를 산 직장인 A는 회사에서는 회사원, 본가에서는 부모님의 아들, 집에서는 가정의 가장이자 아내의 남편, 자식의 아버지 일 수 있는 것처럼
         한 사람(객체)이 동시에 둘 이상의 역할을 수행하는 것도 가능하다.


 ■ 역할, 책임, 협력
  □ 앞에 커피주문 예시에서 '사람 -> 객체', '에이전트(캐시어/바리스타)의 요청 -> 메시지', '에이전트가 요청을 처리하는 방법 -> 메서드'로 치환하면
    대부분의 설명을 객체지향이라는 문맥으로 옮겨올 수 있다.
  □ 아리스토텔레스의 "인간은 사회적 동물이다" 란 말처럼, 사람들은 위의 커피주문과 같은 특정한 목표를 이루기 위해 서로 협력한다.
    -> (My Opinion)이를 빗대 객체지향 프로그램을 설명해본다면, "객체지향 프로그램은 각 객체들의 유기적 협력을 통해 구현되어지는 사회적 프로그램" 이라고 할 수 있겠다.
  □ 협력의 핵심은 특정한 책임을 수행하는 역할들 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다.
  □ 일상생활에서 목표는 사람들(객체들)간의 협력을 통해 달성되며, 목표는 더 작은 책으로 분할되고 책임을 수행할 수 있는 적절한 역할을 가진 사람(객체)에 의해 수행된다.
    협력에 참여하는 각 개인(객체)은 책임을 수행하기 위해 다른 사람(객체)에게 도움을 요청하기도 하며, 이를 통해 연쇄적인 요청과 응답으로 구성되는 협력 관계가 완성된다.
  □ 객체의 세계는 인간의 세계의 유사하다. ("어떤 객체도 섬이 아니다"[by Kent Beck, 1989])
  □ 객체 공동체 안에 살고 있는 성실한 객체 시민은 자신에게 주어진 역할과 책임을 다하는 동시에 시스템의 더 큰 목적을 이루기 위해
    다른 객체와도 적극적으로 협력한다.
  □ 사용자가 최종적으로 인식하게 되는 시스템의 '기능' 은 "객체들이 성실히 협력해서 일궈낸 결실" 이다.
    : 사람들이 공통의 목표를 달성하기 위해 협력하듯, "객체들은 애플리케이션의 기능을 구현하기 위해 협력한다."
  □ 애플리케이션의 기능은 더 작은 책임으로 분할되고, 책임은 적절한 역할을 수행할 수 있는 객체에 의해 수행된다.
    객체는 자신의 책임을 수행하는 도중에 다른 객체에게 도움을 요청하기도 한다.
    => 결론적으로 시스템은 역할과 책임을 수행하는 객체로 분할되고, 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 '협력'으로 구현된다.
       - (구조적으로 보면) 시스템 : '객체1 (A역할)' + '객체2 (B역할)' + '객체3 (C역할)' + ...
       - (기능적으로 보면) 시스템 : 『 요청1 -> 요청2 -> 요청3 -> ... ㄱ
                                       응답1 <- 응답2 <- 응답3 <- ...--|  』  : '협력'체
  □ 객체지향 설계라는 예술은 '객체에게 적절한 책임을 할당하는 것' 에서 시작된다.
    '책임'은 객체지향 설계의 품질을 결정하는 가장 중요한 요소다.
    '책임이 불분명한 객체'는 애플리케이션의 미래 역시 불분명하게 만든다, 얼마나 적절한 책임을 선택하느냐가 애플리케이션의 아름다움을 결정한다.
  □ '역할'은 '관련성 높은 책임의 집합'이다 -> '높은 응집도의 책임 집합'
  □ '역할'은 유연하고 재사용 가능한 협력 관계를 구축하는 데 중요한 설계 요소다.
    대체 가능한 역할과 책임은 객체지향 패러다임의 중요한 기반을 제공하는 '다형성' 과도 깊이 연관돼있다.
