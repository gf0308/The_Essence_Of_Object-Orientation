['객체지향의 사실과 오해' 학습 내용 정리]

1장 : 협력하는 객체들의 공동체

▣ 객체지향

 *'객체지향' 프로그래밍이란 : 각 '객체'들이 자신이 가진 '역할'과 그에 따른 '책임'을 정확히 수행함으로써,
                            공동의 목표( : 프로그램[애플리케이션] 자신의 기능(애플리케이션 기능))를 완성해내는 원리로
                            프로그램이 구현되도록 하는 방식이다.
                          -> 각 객체들이 자기 몫을 정확히 잘 수행해내며, 그 속에서 서로 '요청-응답' 이란 상호작용을 함으로써
                             그 결과로 하나 하나 생겨나는 프로그램기능(: 기능부품)들이 차곡차곡 레고처럼 쌓이고,
                             이렇게 유기적으로 구축되어가면서 최종적으로 완성된 애플리케이션 기능이 구현되어지도록 하는 것이
                             '객체지향'인 것이다.

 ■ 객체지향에 대한 일반적인 통념, 그리고 오해와 사실
  □ 흔히 객체지향은 실세계를 모방하는 것, '현실세계에 대한 사물의 추상화'라는 설명이 있다.
    사실 이는 객체지향의 기반을 이루는 철학적인 개념을 설명하는 데는 적합하지만, 유연하고 실용적인 관점에서
    객체지향 분석, 설계를 설명하기에는 적합하지 않다.
    왜냐하면 애플리케이션을 개발하면서 객체에 직접적으로 대응되는 실세계의 사물을 발견할 확률은 그다지 높지 않기 때문이다.
    (심지어 그런 객체가 존재한다고 해도 객체와 사물 간의 개념적 거리는 유사성을 찾기 어려울 정도로 매우 먼 것이 일반적이다)

  □ '객체지향의 목표'는 사실 '실세계를 모방하는 것이 아니다, 오히려 새로운 세계를 창조하는 것' 이다.
     단순히 실세계를 소프트웨어 안으로 옮겨 담는 것이 아니라, '고객과 사용자를 만족시킬 수 있는 신세계를 창조하는 것'인 것이다.

  □ 이러한 숨은 사실에도 불구하고 객체지향이 '실세계의 모방'이라는 비유가 흔히 쓰이는 이유는 다음과 같은 장점이 있기 때문이다
    : "실세계에 대한 비유가 객체지향의 다양한 측면을 이해하고 학습하는 데 매우 효과적이기 때문" 이다.

      - '객체'를 '스스로 생각하고 스스로 결정하는 현실 세계의 생명체'에 비유하는 것은
        상태(변수)와 행위(함수)를 '캡슐화(Encapsulation)'하는 소프트웨어 객체의 '자율성(autonomous)'을 설명하는 데 효과적이다.
      - '현실 세계의 사람들'이 '암묵적 약속과 명시적인 계약을 기반으로 협력'하며 목표를 달성해나가는 과정은
        '메세지(message)'를 주고받으며 공동의 목표를 달성하기 위해 '협력(collaboration)'하는 객체들의 관계를 설명하는데 적합하다.
      - 실세계의 사물을 기반으로 소프트웨어 객체를 식별하고 구현까지 이어간다는 개념은
        객체지향 설계의 핵심 사상인 '연결완전성(seamlessness)'을 설명하는 데 적합한 틀을 제공한다.

  => 정리 : 실세계의 모방이라는 객체지향의 개념은 훌륭한 프로그램을 설계하고 구현하는 실무적인 관점에서는 부적합하지만,
            객체지향이라는 용어에 담긴 기본 사상을 이해하고 학습하는 데는 매우 효과적이다.
            -> 이러한 이유로 인해 "실세계의 모방"이라는 설명이 100% 정확하고 항상 합당한 설명이 아님에도 불구하고,
               많이 회자되고 비유로서 사용되는 것이다.


 ■ 객체지향의 가장 핵심적인 개념 : '역할(Role)','책임(Responsibility)','협력(Collaboration)'

   예시 ex) 한 직장인이 출근길 카페에 들려 커피를 주문해서 커피를 얻기까지의 한 싸이클(기능)
            : 위의 case 한 건, 즉 "직장인 A가 카페에서 커피 한잔을 주문해 커피를 얻는다" 는 케이스 한 건이 완료되는 것
               = '애플리케이션 기능' 하나가 완수되고 끝남
      - 등장인물: 직장인A, 주문받는 캐시어 B, 주문을 받고 커피를 제조하는 바리스타 C => 객체들
      - 각 객체들의 역할:
          -- 직장인 A : 커피를 고르고 주문한다, 진동벨이 울리면 커피를 수령한다.
          -- 캐시어 B : 고객으로부터 주문을 받고 계산한 다음, 테이크아웃커피잔에 커피명을 적고 바리스타 쪽 라인에 올린다,
                        커피가 다 만들어지면 진동벨을 울리고 고객에게 넘긴다.
          -- 바리스타 C : 커피잔에 적히 커피명을 보고 커피를 제조한 다음, 커피잔에 담아서 캐시어에게 다시 준다.
      - 위의 '커피 한잔을 주문하고, 주문을 받고 생산해서, 고객에게 제공하는' 한 싸이클이 완수되기 까지
        모든 과정 속에서 손님,캐시어,바리스타 사이의 암묵적인 '협력 관계'가 존재한다.
        위의 과정이 모두 정상적으로 이루어지기까지 각 주체가 자신의 역할을 다하고 있는 것 자체가 '협력'을 이루고 있는 것이다.
        그리고 이 협력이 이루어지는 상황 속 각 주체는 자신의 역할을 수행하는 과정에서 맡은 바 '책임'을 다한다.
      - 이 케이스에서 각 주체가 자신의 역할을 끝낼 때는 각각
         -- A : 커피를 받아들고 나갈 때
         -- B : 제조된 커피를 고객에게 제공하고 인사할 때
         -- C : 커피를 제조해 캐시어에게 넘겨줄 때
         각 주체들은 각자의 역할을 끝낸다.
         -> 각 주체가 각자의 역할을 다 마쳤을 때 커피주문이라 불리는 협력관계는 깔금하게 마무리 된다.


 ■ 요청과 응답으로 구성된 협력
  - 사람들은 스스로 해결하지못하는 문제와 마주치면 문제 해결에 필요한 지식을 갖고 있거나 서비스를 제공해줄 수 있는 사람에게 도움을 '요청'한다.
    이처럼 객체도 자신의 일을 처리하기 위해 필요한 것을 '요청(request)'하게 된다. -> 이게 request 이다
  - 일반적으로 하나의 문제를 해결하기 위해 다수의 사람 혹은 역할이 필요하기 때문에 한 사람에 대한 요청이 또 다른 사람에 대한 요청을 유발하는 것이 일반적이다.
    따라서 "요청은 연쇄적으로 발생"한다.
  - 요청을 받은 사람은 주어진 책임을 다하면서 필요한 지식이나 서비스를 제공한다. 즉 다른 사람의 요청에 '응답(response)'한다. -> 이게 response 이다
    요청이 연이어 발생하듯 이에 따른 응답 역시 요청의 방향과 반대 방향으로 연쇄적으로 (리턴되어) 전달된다.
  - 이렇게 요청과 응답을 통해 '협력(collaboration)'이 일어나게 되고 그 결과 일(문제)이 해결이 되어진다.

  => 요청과 응답을 통해 다른 사람과 협력을 이루면서 인간은 (혼자서는 처리할 수 없는) 거대하고 복잡한 문제를 해결할 수 있는 공동체를 형성할 수 있게 된다.
     '협력의 성공(그리고 그 결과 문제의 해결)'은 특정한 역할을 맡은 '각 개인(객체)이 얼마나 요청을 성실히(그리고 정확히) 이행하는가' 에 달려 있다.


 ■ 역할과 책임
  □ 역할이라는 단어는 의미적으로 책임이라는 개념을 내포한다
    특정한 역할은 특정한 책임을 암시한다
  □ 역할과 책임은 협력이 원활하게 진행되는 데 필요한 핵심적인 구성 요소다
  □ 각 사람(객체)가 '역할'과 '책임'을 수행하며 '협력'을 이루어가는 과정에서는 다음과 같은 특징적 개념들이 존재한다.
    ▶ '여러 사람(객체)가 동일한 역할을 수행할 수 있다'
       : 객체A가 수행하던 역할인 '역할 A'는 다른 객체에 의해 수행되어도 상관이 없다, 다른 객체 B가 수행하더라도, 모로 가도 '역할 A'가 수행되어지기만 하면 된다.
    ▶ '역할은 대체 가능성을 의미한다.'
       : 요청자(Requester) 입장에서 응답자(Responder)가 누구인지는 상관이 없다, 그저 얻어져야할 응답(response)만 제대로 얻어지면 된다, 따라서 어떤 사람(객체)가 요청을 수행하더라도 문제가 되지 않으므로 대체가능하다.
    ▶ '책임을 수행하는 방법은 자율적으로 선택할 수 있다.'
       : 요청을 받아 수행하는 사람(객체)는 이를 처리하는 방법을 자율적으로 선택할 수 있다, 즉 요청을 받는 사람(객체) 마다 자기만의 독특한 스타일대로 처리할 수 있다는 것이다,
         이처럼 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 '다형성(Polymorphism)' 이라고 한다.
    ▶ '한 사람(객체)이 동시에 여러 역할을 수행할 수 있다.'
       : 출근길에 커피를 산 직장인 A는 회사에서는 회사원, 본가에서는 부모님의 아들, 집에서는 가정의 가장이자 아내의 남편, 자식의 아버지 일 수 있는 것처럼
         한 사람(객체)이 동시에 둘 이상의 역할을 수행하는 것도 가능하다.


 ■ 역할, 책임, 협력
  □ 앞에 커피주문 예시에서 '사람 -> 객체', '에이전트(캐시어/바리스타)의 요청 -> 메시지', '에이전트가 요청을 처리하는 방법 -> 메서드'로 치환하면
    대부분의 설명을 객체지향이라는 문맥으로 옮겨올 수 있다.
  □ 아리스토텔레스의 "인간은 사회적 동물이다" 란 말처럼, 사람들은 위의 커피주문과 같은 특정한 목표를 이루기 위해 서로 협력한다.
    -> (My Opinion)이를 빗대 객체지향 프로그램을 설명해본다면, "객체지향 프로그램은 각 객체들의 유기적 협력을 통해 구현되어지는 사회적 프로그램" 이라고 할 수 있겠다.
  □ 협력의 핵심은 특정한 책임을 수행하는 역할들 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다.
  □ 일상생활에서 목표는 사람들(객체들)간의 협력을 통해 달성되며, 목표는 더 작은 책으로 분할되고 책임을 수행할 수 있는 적절한 역할을 가진 사람(객체)에 의해 수행된다.
    협력에 참여하는 각 개인(객체)은 책임을 수행하기 위해 다른 사람(객체)에게 도움을 요청하기도 하며, 이를 통해 연쇄적인 요청과 응답으로 구성되는 협력 관계가 완성된다.
  □ 객체의 세계는 인간의 세계의 유사하다. ("어떤 객체도 섬이 아니다"[by Kent Beck, 1989])
  □ 객체 공동체 안에 살고 있는 성실한 객체 시민은 자신에게 주어진 역할과 책임을 다하는 동시에 시스템의 더 큰 목적을 이루기 위해
    다른 객체와도 적극적으로 협력한다.
  □ 사용자가 최종적으로 인식하게 되는 시스템의 '기능' 은 "객체들이 성실히 협력해서 일궈낸 결실" 이다.
    : 사람들이 공통의 목표를 달성하기 위해 협력하듯, "객체들은 애플리케이션의 기능을 구현하기 위해 협력한다."
  □ 애플리케이션의 기능은 더 작은 책임으로 분할되고, 책임은 적절한 역할을 수행할 수 있는 객체에 의해 수행된다.
    객체는 자신의 책임을 수행하는 도중에 다른 객체에게 도움을 요청하기도 한다.
    => 결론적으로 시스템은 역할과 책임을 수행하는 객체로 분할되고, 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 '협력'으로 구현된다.
       - (구조적으로 보면) 시스템 : '객체1 (A역할)' + '객체2 (B역할)' + '객체3 (C역할)' + ...
       - (기능적으로 보면) 시스템 : 『 요청1 -> 요청2 -> 요청3 -> ... ㄱ
                                       응답1 <- 응답2 <- 응답3 <- ...--|  』  : '협력'체
  □ 객체지향 설계라는 예술은 '객체에게 적절한 책임을 할당하는 것' 에서 시작된다.
    '책임'은 객체지향 설계의 품질을 결정하는 가장 중요한 요소다.
    '책임이 불분명한 객체'는 애플리케이션의 미래 역시 불분명하게 만든다, 얼마나 적절한 책임을 선택하느냐가 애플리케이션의 아름다움을 결정한다.
  □ '역할'은 '관련성 높은 책임의 집합'이다 -> '높은 응집도의 책임 집합'
  □ '역할'은 유연하고 재사용 가능한 협력 관계를 구축하는 데 중요한 설계 요소다.
    대체 가능한 역할과 책임은 객체지향 패러다임의 중요한 기반을 제공하는 '다형성' 과도 깊이 연관돼있다.


▣ 협력 속에 사는 객체
 객체지향 애플리케이션의 윤곽을 결정하는 것은 역할,책임,협력 이지만, 실제로 협력에 참여하는 주체는 객체다.
 -> 객체지향의 주인공은 '객체'라는 것이다.
    객체지향을 객체지향이라고 부르는 이유는 패러다임의 중심에 '객체'가 있기 때문이다.

   객체는 애플리케이션의 기능을 구현하기 위해 존재한다.
   아주 작은 기능조차 객체 혼자 감당하기에는 버거울 정도로 복잡하고 거대하기 때문에
   일반적으로 객체는 다른 객체와의 협력을 통해 기능을 구현하게 된다.
   -> 이러한 애플리케이션 구현을 위한 '협력 공동체의 일원'으로서, 객체는 '두 가지 덕목'을 갖추고 그 사이에서 균형을 유지해야 한다.
     1) 객체는 협력적이어야 함
     2) 객체는 자율적이어야 함

 ■ "객체는 충분히 '협력적' 이어야 한다."
  - 객체는 자기 혼자 다하려고 하는건 절대 안되고, 다른 객체와 상호작용하며 소통하고 협력해서 일해야 함
  - 즉 협력적 이어야 함
  - 모든 것을 스스로 다 처리하려고 하는 전지전능한 객체(god object)는 내부적인 복잡도에 의해 자멸한다.
    -> "혼자만 뛰고 공차는 축구선수는 쓸모 없음"
  - 충분히 협력적이라는 말이 다른 객체의 명령대로만 수동적으로 행동한다는 것이 아님
    -> 객체는 다른 객체의 명령에 복종하는 것이 아니라, '요청에 응답'할 뿐이다.
       어떤 방식으로 응답할지는 객체 스스로 판단하고 결정한다
       심지어 요청에 응할지 여부도 객체 스스로 결정할 수 있다.

 ■ "객체는 충분히 자율적 이어야 한다"
  - 자율적 : '자기 스스로의 원칙에 따라 어떤 일을 하거나 자기 스스로를 통제하여 절제하는 것'
  - 사람들은 다른 사람의 요청에 따라 행동하지만 최대한 스스로의 판단에 따라 결정하고 행동함
    ex) 손님이 캐시어에게 커피를 주문하더라도, 캐시어가 바리스타에게 주문내역을 어떻게 전달할지는 손님이 알바가 아님, 요구할 바도 아님,
        이는 '캐시어의 자율'임 -> 캐시어는 요청에 대해 스스로 판단하고 행동하는 자율적인 존재임
        --> 객체가 이와 같음, 요청에 대해 수행하고 그 결과를 응답해줄 뿐이지 그를 수행하는 방식은 스스로 자율적으로 선택한다.
  - 객체공동체에 속한 객체들은 공동의 목표('애플리케이션의 구현!')를 달성하기 위해 협력한다
    하지만 그를 수행하는 행동은 스스로의 결정과 판단에 따라 자율적으로 수행한다.
  - '객체지향 설계의 묘미'
    : 다른 객체와 조화롭게 협력할 수 있을 만큼 충분히 개방적인 동시에,
      협력에 참여하는 방법을 스스로 결정할 수 있을 만큼 충분히 자율적인 객체들의 공동체를 설계하는 것
      -> 이게 '객체지향 프로그램을 만드는 것의 독특하고 특별한 특유의 풍미이다.'

 ■ 상태와 행동을 함께 지닌 자율적인 객체
   흔히 객체를 상태(state)와 행동(behavior)을 함께 지닌 실체라고 정의하곤 한다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면
  그 행동을 하는 데 필요한 상태(속성)도 함께 지니고 있어야 한다는 것을 의미한다.

  객체는 어떤 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적 존재로 남기 위해선
  '필요한 행동' 과 '상태' 를 함께 지니고 있어야 한다.
  (이 말은, '데이터'와 '프로세스'를 둘 다 갖고 있어야 혼자서 뭐라도 단독으로 할 수 있는, 독립적은 단위가 된다는 것)

  - 객체의 '자율성'은 "객체의 내부와 외부를 명확하게 구분하는 것으로부터 나온다"
    객체의 사적인 부분(ex: 객체의 프로퍼티) 은 객체 스스로 관리하고 외부에서 일체 간섭할 수 없도록 차단해야 하며,
    객체의 외부에서는 접근이 허락된 수단(ex: Getter&Setter 메서드 등) 을 통해서만 객체와 의사소통해야 함
    -> (이러한 원칙에 의하여) 객체는 다른 객체가 무엇(what)을 수행하는 지는 알 수 있지만, 어떻게(how) 수행하는 지에 대해서는 알 수 없다.

  - 객체의 관점에서 자율성이란 자신의 상태를 직접 관리하고 상태를 기반으로 스스로 판단하고 행동할 수 있음을 의미한다
  - 객체는 상태와 행위를 하나의 단위로 묶는(한세트로 묶여있는 그 둘을 자기 구성요소로 하고 있는) 자율적인 존재다.

  *- 과거의 전통적인 개발 방법은 데이터와 프로세스를 엄격하게 구분한다.
     이에 반해 객체지향에서는 데이터와 프로세스를 객체라는 하나의 틀 안에 함께 묶어 놓음으로써 객체의 자율성을 보장한다. (*데이터 : 프로퍼티 / *프로세스 : 함수,메서드)
     -> 이것이 전통적인 개발 방법과 객체지향을 구분짓는 '가장 핵심적인 차이' 이다.
        "자율적인 객체로 구성된 객체공동체는 유지보수가 쉽고 재 사용이 용이한 시스템을 구축할 수 있는 가능성을 제시한다."

 ■ 협력과 메세지
  커피주문 손님은 캐시어에게 주문할 때 직접 목소리를 내서 주문할 수도 있고 핸드폰에 문자를 써서 보여줘 주문할 수도 있고 여러 방식으로 주문을 할 수 있다.
  풍부한 매커니즘을 이용해 요청하고 응답할 수 있는 인간들의 세계와는 달리 객체지향의 세계에서는 오직 한 가지 의사소통 수단만이 존재한다.
  이를 '메시지' 라고 한다.
   : 한 객체가 다른 객체에게 요청하는 것을 '메시지를 전송한다' 고 하고, 다른 객체로부터 요청을 받는 것을 '메시지를 수신한다' 고 한다.
  => 결과적으로 객체는 협력을 위해 다른 객체에게 메시지를 전송하고(request) 다른 객체로부터 메시지를 수신한다(response).
     따라서 "객체지향의 세계에서 '협력' 은 메시지를 전송하는 객체와 메시지를 수신하는 객체 사이의 관계로 구성된다."
     이때 메시지를 전송하는 객체를 '송신자(sender)'라고 하고, 메시지를 수신하는 객체를 '수신자(receiver)'' 라고 한다.

  ■ 메서드(Method)와 자율성
   객체는 다른 객체와 협력하기 위해 메시지를 전송한다.
   수신자는 먼저 수신된 메시지를 이해할 수 있는지 여부를 판단한 후 미리 정해진 자신만의 방법에 따라 메시지를 처리한다.
   이처럼 객체가 수신된 된 메시지를 처리하는 방법을 '메서드(method)' 라고 한다.

   - '객체는 메시지를 수신 후 메시지에 담겨 있는 내용을 수행할 메서드를 선택한다'
   : 객체지향 프로그래밍 언어에서 메서드는 클래스 안에 포함된 함수 또는 프로시저를 통해 구현된다.
     따라서 어떤 객체에게 메시지를 전송하면 결과적으로 '메시지에 대응되는' 특정 메서드가 실행된다.
    '메시지를 수신한 객체' 가 실행 시간(실행 순간)에 메서드를 선택할 수 있다는 점은 다른 프로그래밍 언어와 객체지향 프로그래밍 언어를 구분짓는 핵심적인 특징 중 하나다.
    (*절차적인 언어(절차지향 언어)는 프로시저 호출에 대한 실행코드(어떤 코드가 실행될지) 가 컴파일 순간 때 결정된다.)

   - '메시지와 메서드의 분리'는 객체의 협력에 참여하는 객체들 간의 자율성을 증진시킨다.
     : 커피 주문을 전달받은 바리스타는 '커피 머신으로 커피 제조'를 할수도 있지만, '수작업으로 커피 제조'를 할수도 있다.
       -- 커피 제조 요청 : 메시지
       -- 커피 제작하는 구체적인 방법 : 메서드
       커피 제조를 요청한 캐시어는 커피가 제조될 것이라 기대하지만, 커피를 어떻게 제조할지는 본인이 알바가 아니며, 알 필요도 없음,
       그리고 바리스타는 커피 제조라는 메시지에 응답하기 위해 자신만의 자율적인 방법에 따라 커피를 제조할 수 있음(-> 메서드를 선택함)

       => 외부의 요청이 무엇인지를 표현하는 '메시지'와 요청을 처리하기 위한 구체적인 방법인 '메서드'를 분리하는 것은
          객체의 자율성을 높이는 핵심 매커니즘이다. (-> Q1. 메시지와 메서드가 분리되지 않은 방식이 따로 있었나?)
          이것은 '캡슐화(Encapsulation)'라는 개념과도 깊이 연관돼 있다.


▣ 객체지향의 본질
 객체지향이란 무엇인가?

  객체지향의 본질을 종합한 간략 정리
  - 객체지향이란 시스템을 상호작용하는 자율적인 객체들의 공동체로 바라보고, 객체를 이용해 시스템을 분할하는 방법이다
     (: 애플리케이션을 만들 때, 각자 역할과 책임을 부여받고 스스로 판단하고 결정하는 '자율적인' 객체들을 두고,
        이 객체들이 서로 '협력' 하게 하여 애플리케이션의 기능을 구현하게 하는 것 )
  - 자율적인 객체란 '상태'와 '행위'를 함께 지니며 스스로 자기 자신을 책임지는 객체를 의미한다.
  - 객체는 시스템의 행위를 구현하기 위해 다른 객체와 협력한다. 각 객체는 협력 내에서 정해진 역할을 수행하며, 역할은 관련된 책임의 집합이다.
  - 객체는 다른 객체와 협력하기 위해 메시지를 전송하고, 메시지를 수신한 객체(receiver)는 메시지를 처리하는 데 적합한 메서드를 자율적으로 선택한다.

 ■ 객체를 지향하라
 객체지향의 포커스는 원래 '객체' 였다.
 객체지향의 개념은 1960년대 발표된 프로그래밍 언어 '시뮬라67'에서 출발했으며, 객체지향의 인기를 주도한 것 역시 '스몰토크(Smalltalk)' 와 C++,
 자바로 대표되는 클래스 기반 프로그래밍 언어의 유행이었다. 초기 객체지향 프로그래밍 언어의 초점은 새로운 개념의 데이터 추상화를 제공하는 '클래스' 라는 빌딩블록에 맞춰져 있었다.
 그러다 점점 앨런케이와 같은 객체지향 선구자들의 초기 의도와는 달리 대부분의 사람들은 객체지향을 클래스를 지향하는 것으로 생각하게 되어갔다.
 그 결과 사람들은 객체지향의 중심에 있어야 할 '객체'로부터 조금씩 멀어져 갔다.
 객체보단 클래스 위주로 포커스를 맞추고 '클래스를 정의하는 방법' 과 '클래스 사이의 상속'에 초점을 더 맞추게 된 것이다.

 * 객체지향의 핵심은 클래스가 아니다. 핵심은 "적절한 책임을 수행하는 각 역할 간의 유연하고 견고한 협력 관계 구축" 이다!
  - 클래스가 객체지향에서 매우 중요한 '구성요소(construct)'인 것은 맞다, 하지만 본질(중심개념)인 것은 아니다.
  - 클래스가 없어도 객체지향은 구현될 수 있다
    자바스크립트 같은 프로토타입(prototype) 기반의 객체지향 언어에서는 클래스가 존재하지 않으며 오직 객체만이 존재한다.
    프로토타입 기반의 객체지향 언어에서는 상속 역시 클래스가 아닌 객체 간의 위임(delegation) 메커니즘을 기반으로 한다
  - 지나치게 클래스를 강조하는 프로그래밍 언어적인 관점은 객체의 캡슐화를 저해하고 클래스를 서로 강하게 결합시킨다(->결합도 증가)
  - 애플리케이션을 협력하는 객체들의 공동체가 아닌 클래스로 구성된 설계도로 보는 관점은, 유연하고 확장 가능한 애플리케이션의 구축을 방해한다.

  훌륭한 객체지향 설계자가 되기 위해 거쳐야 할 첫번 째 도전은 (객체지향의 본질에 대한 관점을)
  '코드를 담는 클래스의 관점' 에서 '메시지를 주고 받는 객체의 관점' 으로 전환하는 것이다.
  중요한 것은 어떤 클래스가 필요한가가 아니라 어떤 객체들이 어떤 메시지를 주고 받으며 '협력'하는가다.
  클래스는 객체들의 협력관계를 코드로 옮기는 '도구'에 불과하다. (클래스는 도구다, 객체들의 협력을 코드로 옮기는.)

  '객체지향의 핵심'
  : 적절한 책임을 수행하는 역할 간의 유연하고 견고한 협력관계를 구축하는 것
    - 클래스는 협력에 참여하는 객체를 만드는 데 필요한 구현 메커니즘일 뿐이다.
    - '협력구조' 와 '책임을 식별하는 것' 이 가장 중요한 핵심인 것
    - '객체지향의 중심' 에는 클래스가 아니라 '객체' 가 위치하며, 중요한 것은 클래스들 간의 정적인 관계가 아니라
      '메시지를 주고받는 객체들의 동적인 관계' 다.

  (In my opinion)
   객체지향의 본질 : "메시지를 주고 받는 (각 역할과 책임을 부여받은)객체들의 (유연하고 견고한)공동체가 시스템의 기능을 구현하도록 하는 것"

   *클래스의 구조와 메서드가 아니라 객체의 역할, 책임, 협력에 집중하라.
    객체지향은 객체를 지향하는 것이지 클래스를 지향하는 것이 아니다.















