['객체지향의 사실과 오해' 학습 내용 정리]

5장: 책임과 메시지

 1964년 두 명의 심리학자 존 달리(John Darley)와 밥 라타네(Bob Latane) 가 뉴욕대학생들을 대상으로 '책임감' 관련한 한 실험을 수행했다.
 여러 학생들이 한 학생의 이야기를 마이크로폰으로 듣고 있다가 갑자기 그 학생이 발작을 일으키는 소리가 들려올 경우
 얼마나 많은 학생들이 그 학생을 돕기 위해 외부에 도움을 요청했는지를 확인한 실험이었다.
 => 여러 사람들이 같이 듣고 있다고 여긴 경우에는, 외부에 도움을 요청한 비율이 31%밖에 되지 않았었다.
    자신말고도 또 도움을 요청할 사람이 있을 것이란 '책임감 분산(diffusion of responsibility)'이 발생했기에 발생한 일이었다.
 => 이는 '명확한 책임' 을 가진 권위자가 없을 때 어떤 일이 벌어지는 지를 잘 보여준다.

 객체의 세계도 마찬가지다. 객체들의 협력에는 '명확한 책임' 과 '역할' 을 지닌 객체들이 참여해야 한다.
 훌륭한 객체지향의 세계는 명확하게 정의된 역할과 책임을 지닌 객체들이 상호협력하는 세계다.


▣ 자율적인 책임
 ■ 설계의 품질을 좌우하는 책임
 ■ 자신의 의지에 따라 증언할 수 있는 자유
 ■ 너무 추상적인 책임
 ■ '어떻게' 가 아니라 '무엇' 을
 ■ 책임을 자극하는 메시지


▣ 메시지와 메서드
 ■ 메시지
 ■ 메서드

 ■ 다형성
  □ 다형성의 정의
  : 어떤 객체(메시지송신 객체)가 메시지를 송신할 때,
    이 '한 메시지(책임수행요청)' 을 서로 다른(다른 타입의) 객체들이 수신(이해) 할 수도 있고,
    그럴 때 각자만의 서로 다른 방식으로 처리하되 수행 결과는 동일하게[송신객체가 원하는 결과] 만들어내고
    송신객체가 이를 얻을 수 있는 특징이다.

  □ '다형성' 개념 이해의 핵심 포인트
   : 다형성에서 중요한 것은 '메시지 송신자의 관점' 임.
    - 메시지를 송신한 객체들이 동일한 오퍼레이션을 서로 다른 방식으로 처리하더라도,
      책임을 정상적으로 잘 수행해내기만 한다면 송신객체 입장에서는 서로 다른 타입이든 다른 방식으로 처리하든 아무 상관이 없음.
    - 그러므로 이 (다형적인) 객체들을 송신자는 구분할 필요가 없고, 모두 동일하게 봄
    -> 한 책임을 수행시키고자 할 때, 다양한 타입의 객체들을 활용 가능하다는 특징 => '다형성(Polymorphism)'
      (송신객체 관점 에서)           (다형적인)

  □ 다형성이 암시하는 의미
   : 객체들 간의 '대체가능성'
   다형성은 동일 역할을 수행할 수 있는 객체들 사이에 '대체가능성'이 존재한다는 것을 의미한다.
   - 메시지 송신객체 입장에선 동일 메시지를 처리할 수만 있다면 그 담당객체가 A 타입이든, B 타입이든, a 메서드를 통하든 b 메서드를 통하든 알바 아님.
   - 송신자 입장에선 그 역할(책임)을 수행할 수 있기만 하면 됨
    => 그 협력 내에서 객체들은 대체가능한 존재인 것

  □ 다형성의 효과
  : 다형성은 객체들의 대체 가능성을 이용해 '설계를 유연' 하고 '재사용 가능' 하게 만든다
    - 송신객체는 수신객체의 종류(타입)을 모르더라도 메시지(책임수행요청)를 전송할 수 있다 (-> 즉 여러 종류 객체에게 책임수행요청을 보낼 수 있는 것)
    - 다형성은 수신자의 종류를 캡슐화 하고 있다.
      (송신객체 입장에선 수신자 종류를 알 필요 없게 만든다는 면에서)

  □ 다형성이 ('다형성' 이란 법칙) 달성될 수 있었던 원인**
  : 객체지향 패러다임은
    송신객체와 수신객체 간의 결합도를 결정하는 요인을
    '객체타입' 에서 '메시지' 로 바꿨다.
     => 결합도가 확연히 낮아지게 되는 결과
       (객체타입이 뭐냐는 하나도 상관없이, 해당메시지를 이해하고 처리할 수 있느냐만 관건이 됨)

    다시말하면,
    : 송신객체-수신객체 간 결합도(decided by 객체 타입) --> 송신객체-수신객체 간 결합도(decided by 메시지)
     로 바꿔 버림
     -> (보다 추상화되어진 결합도..?)
     -> 결합도 낮아짐

  이렇게 된 결과, 객체는 메시지를 이해할 수 있는 어떤 객체와도 협력이 가능해졌고 그 결과 프로그래머는 유연하고 확장가능한 구조를 만들 수 있게 됨
  -> '객체지향 패러다임이 강력한 이유 (다형성을 이용해 협력을 유연하게 만들 수 있는것)''
                                                * 애플리케이션을 구성하는 객체의 협력이 유연해진다
                                                  = 애플리케이션이 추가/변경/유지보수에 용이해진다
                                                   = 엄청난 강력함


 ■ 유연하고 확장 가능하고 재사용성이 높은 협력의 의미
  : 훌륭한 설계 품질(Design Quality)

  위에서 언급하는 '송신자가 수신자에 대해 매우 적은 정보만 알고 있더라도 상호 협력이 가능하다는 사실' 이 중요한 이유는
  -> '설계의 품질' 에 큰 benefit 을 주기 때문이다.
   1) "협력이 유연해짐"
     - 송신객체는 수신객체가 메시지를 이해하기만 한다면 누구라도 상관 안함
     - 수신객체가 어떤 타입인지 알지도 신경쓰지도 않기 때문에 다른 타입의 객체로 교체해도 송신자에겐 아무 영향 X
      -> 송신자에 대한 파급효과 없이 유연하게 (객체 간) 협력 변경 가능
   2) "협력이 수행되는 방식 확장 가능"
     - 송신객체에 대한 파급효과는 전무하게 수신객체를 변경할 수 있기 때문에 세부적인 수행방식을 쉽게 수정 가능
       : 협력을 확장하고 싶으면 그를 위한 객체(새로운 유형의 객체)로 끼워맞추기(교체)만 하면 됨
   3) "협력이 수행되는 방식 재사용 가능"
     - 전체 기능인 '협력' 에 영향을 미치지 않고서도 다양한 객체들이 수신객체로서 활동할 수 있기 때문에,
       다양한 문맥(상황)에서도 이 '협력' 을 재사용 가능함
       (: 이 협력의 구도와 호환되는 어떠한 상황에서 전체의 큰 틀은 유지한 채 세부적인 기능의 객체만 교체해서 구동시키면 -> 그 문맥을 위한 '협력' 으로 재탄생하게 됨!)

        <객체지향 시스템의 특징(Freeman 2009)>
        "객체지향 시스템은 협력하는 객체들의 연결망(web) 이다."
         - 시스템: 시스템은 객체를 생성하고 상호 간에 메시지를 송신할 수 있게 이들을 끼워 맞춤으로써 구축된다
         - 시스템의 행위: 시스템의 행위는 객체들의 조합으로 창발되는 속성인 것
         - 객체들의 조합: 객체와 객체들이 어떻게 연결되는지에 대한 선택 (프로그래머를 통해 프로그래밍 된 연결관계)
          => "이것은 '객체의 조합을 변경'하기만 하면 '시스템의 행위를 변경'시킬 수 있다는 것을 의미한다."
            - 객체들을 조합시킨 코드: 객체의 조합을 관리하기 위해 작성하는 코드는 객체 연결망이 어떻게 행동할것인지에 대한 '선언적인 정의'
            - 객체가 '무엇을' 할것인지에 초점: 객체가 어떻게 할 것인지보다는 무엇을 할 것인지에 초점을 맞추기 떄문에 시스템의 행위를 변경하기 쉬움.


 ■ 송신자와 수신자를 약하게 연결하는(낮은 결합도를 갖게 하는) 메시지


▣ 메시지를 따라라
 ■ 객체지향의 핵심, 메시지
 ■ 책임-주도 설계 다시 살펴보기
 ■ What/Who 사이클
 ■ 묻지 말고 시켜라(Tell, Don't Ask)
 ■ 메시지를 믿어라


