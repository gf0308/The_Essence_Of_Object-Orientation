['객체지향의 사실과 오해' 학습 내용 정리]

2장 : 이상한 나라의 객체

▣ 객체지향과 인지 능력
 많은 사람들이 객체지향을 직관적이고 이해하기 쉬운 패러다임이라고 말하는 이유는
 객체지향이 "세상을 자율적이고 독립적인 객체들로 분해할 수 있는 인간의 기본적인 인지능력에 기반"을 두고 있기 때문이다.

 ■ 현실세계의 객체와 소프트웨어 세계의 객체
 - 인간이 직접적으로 지각할 수 있는 대부분의 객체는 '물리적인 경계'를 지닌 구체적인 사물이다
 - 그러나 인간의 인지능력은 물리적 한계를 넘어 개념적으로 경계지을 수 있는 '추상적인 사물' 까지도 객체로 인식할 수 있게 한다.
  ex) 주문 한 건, 입출금 한건 은 물리적인 실체는 아니고 추상적은 개념이지만, 인간은 이를 독립적인 한 '단위'로 인식할 수 있음
     - 동일한 입금 계좌로 동일한 금액을 두 번 이체하더라도 각 계좌이체는 명확하게 구분 가능함(인간이라면)
     - 이 관점에서 주문과 계좌이체 등은 비록 물리적 실체는 존재하지 않지만 인간이 쉽게 구분 가능하고 하나의 단위로 인지할 수 있는 개념적인 객체의 일종

 - 세상을 더 작은 객체로 분해하는 것은 본질적으로 세상이 포함하고 있는 복잡성을 극복하기 위한 인간의 작은 몸부림이다
   이렇게 세상을 '구분가능한, 인지가능한' 작고 단순한 단위로 분해함으로써 -> 자신이 몸담고 있는 세상을 이해하려고 노력한다.
   -> '객체'란 인간이 분명하게 인지하고 구별할 수 있는 물리적인 또는 개념적인 '경계'를 지닌 어떤 것이다.

 - 객체지향 패러다임은 인간이 인지할 수 있는 다양한 객체들이 모여 현실세계를 이루고 있는 것처럼
   소프트웨어의 세계 역시 인간이 인지할 수 있는 다양한 소프트웨어 객체들이 모여 이뤄져 있다는 믿음에서 출발한다.
   -> 그러나, 현실 세계와 소프트웨어 세계 사이의 유사성은 여기까지며, 반드시 명심할 점이 있는데
      "객체지향 패러다임의 목적은 현실세계를 모방하는 것이 아닌, 현실세계를 기반으로 새로운 세계를 창조한다는 것" 이란 것이다.
   --> 따라서 소프트웨어 세계에서 살아가는 객체는 현실세계에 존재하는 객체와는 전혀 다른 모습을 보이는 것이 일반적이다.
     ex) 현실세계 객체 vs 소프트웨어세계 객체
      1) '전등'
       - 현실세계: 전등 객체 - 혼자 켜질 수 없음, 인간이 스위치 온을 해야 켜짐
       - 소프트웨어세계: 전등 객체 - 외부의 도움 없이도 스스로 전원을 켜거나 끌 수 있음
      2) '주문'
      - 현실세계: 주문 객체 - '주문'이란게 단독으로 뭘 하는것은 일어나지 않고 사람이 직접 주문 금액을 계산하여 주문이 이루어짐
      - 소프트웨어세계: 주문 객체 - 주문 객체 스스로가 자신의 금액을 계산한다

    이처럼 사실 현실세계의 객체와 소프트웨어 객체는 겉으로는 우리가 알고 있는 그대로의 존재처럼 보이며 유사해보이지만
    본질적으로 매우 이질적인 모습을 갖고 있다.

 ■ 객체의 '상태' 와 '행동' 간의 관계
   객체의 '상태(state)'를 결정하는 것은 '행동(behavior)'이지만, '행동의 결과'를 결정하는 것은 '상태'다.
   ex) [이상한 나라의 엘리스에서]
        앨리스가 작은 문을 통과하기 위해 키를 변화시켜야 했을 때,
        '앨리스의 키(상태 값)'를 변화시키는 것은 앨리스의 '행동(테이블 아래의 케익을 먹는 것 등)'이다.
        즉 앨리스가 하는 행동에 따라 앨리스의 상태가 변하게 된다.
        / 하지만 엘리스가 케익을 먹는 행동을 함으로써 문을 통과할 수 있을 만큼 작아지게 된 것은
          (만약 앨리스의 키가 120cm, 문의 크기가 40cm, 케익을 먹을 때 줄어드는 키가 80cm 라고 하면)
          '80cm 정도가 줄어들면 문을 통과할 수 있을 정도인 앨리스의 120cm의 신장 길이' 라는 상태(state)가 선행되어 있었기 때문이다.
          -> 즉 "케익을 먹어 신장이 줄어들어 문을 통과할 수 있게 됐다"는 결과(행동의 결과)는
             엘리스의 원래 신장 '상태(state)' 에 의해 결정된 것이다.
             케이크를 먹거나 부채질을 하기 전에 '앨리스의 키가 얼마였느냐' 가 케이크를 먹거나 부채질을 한 후의 앨리스의 키를 '결정' 한다.
             => 따라서 앨리스가 한 '행동의 결과'는 앨리스의 '상태'에 의존적이다.

    - 객체의 상태는 객체의 행동에 의해 결정된다
      ex) 앨리스가 문을 앞에 둔 상황에서 앨리스의 위치
          - 앨리스가 문을 통과하는데 성공했다면(행동) : 앨리스의 위치는 이제 문 밖의 정원에 있음(상태)
          - 실패했다면(행동) : 앨리스의 위치는 계속 문 앞의 공간임(상태)

    - 객체의 행동의 결과는 객체의 상태에 의해 결정된다.
      ex) 40cm의 작은 문을 통과하기 위해 그 만큼 앨리스가 키를 줄이려고 할 떄
          - 케이크를 먹으면 80cm정도 작아질 수 있는 상황에서(행동의 결과) : 앨리스의 신장이 120cm 이하라면(상태) -> 통과가능하게 됨
          - 케이크를 먹어도 문을 못 통과하게 되는 경우(행동의 결과) : 만약 앨리스의 신장이 120cm 이상일 경우(상태)

    - '어떤 행동의 성공 여부' 는 이전에 어떤 행동들이 발생했었는지에 영향을 받는다.
      -- 앨리스가 문을 성공적으로 통과할 수 있기 위해서는 문을 통과할 수 있을 정도로 충분히 몸을 작게 줄여야 한다.
         따라서 앨리스는 문을 통과하기 전에 먼저 키를 작게 줄이기 위하여 병 안의 음료나 케이크를 먹어야 한다.
      -- 이것은 "행동 간의 순서가 중요하다" 는 것을 의미한다.
         문을 통과하는 행동이 성공하려면 음료나 케이크를 먹는 행동이 선행돼야만 한다.

    - 객체는 (상태변경과 무관하게) 자기자신 그 자체로서 유일한 존재로 식별이 가능하다.
      ex) Worker라는 사용자정의타입 객체 wk1 이 있다고 하자 : Worker wk1
          wk1 안의 멤버변수 age의 값을 26 -> 29 로 바꿨다고 하자,
          그렇다고 해서 wk1 객체를 우리가 갑자기 다른 객체로 인지하거나 생각하진 않는다
          wk1의 필드 하나가 변경됐을 뿐 wk1은 wk1인 것이다.
       /  앨리스가 케이크를 먹고 키가 줄었다고 해서 앨리스가 앨리스가 아닌 다른 존재가 된 것이 아니다,
          다만 키가 작아진 앨리스가 된 것 뿐으로 우리는 여전히 앨리스라고 인식을 할 수 있다.
          -> 이처럼 "객체는 상태변경과 무관하게 유일한 존재로서 식별 가능하다."

          * 객체의 특징 요약
           1. 객체는 상태를 가지며 상태는 변경 가능하다.
           2. 객체의 상태를 변경시키는 것은 객체의 행동이다.
             - 행동의 결과는 상태에 의존적이며, 상태를 이용해 (행동의 결과를) 서술할 수 있다(예측할 수 있다)
             - 행동의 순서가 결과에 영향을 미친다. (앞서 선행됐어야 할 일이 완료가 됐다면, 행동의 결과는 성공할 것)
           3. 객체는 어떤 상태에 있더라도 유일하게 (단독 존재로서) 식별 가능하다.


 ■  객체, 그리고 소프트웨어 나라
   하나의 개별적인 실체로 식별 가능한 물리적인 또는 개념적인 사물은 어떤 것이라도 객체가 될 수 있다.
   인간의 인지능력 안에서 '개수'를 셀 수 있고, 다른 사물과 '구분'할 수도 있으며,
   '생성 시점'을 알 수 있고, '독립적인 하나의 단위'로서 인식할 수 있는 모든 사물은
   객체다.
   -> 객체의 다양한 특성을 효과적으로 설명하기 위해서는 객체를 '상태(state)', '행동(behavior)', '식별자(identity)'를 지닌 실체로 보는 것이
      가장 효과적이다.(Booch 2007)

      소프트웨어 안에 창조되는 객체 역시 상태, 행동, 식별자를 지닌다.

    * 객체의 정의
      "객체란 식별 가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다.
       객체는 구별 가능한 '식별자', 특징적인 '행동', 변경 가능한 '상태'를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행가능한 코드를 통해 구현된다."

 ■ 상태
   객체에서 상태(state)는 객체가 지금 어떤 행동을 했을 때의 행동의 결과를 바로 예측할 수 있게 해준다.
   만약 객체에서 '상태' 가 없다면 객체가 어떤 행동을 수행할 때 그 성공여부를 예측할 수 있는 방법은
   '이전의 했었던 모든 행동 이력들' 을 다 살펴보는 수 밖에 없다. (이를 달성하기 위해 필요한 작업을[선행작업] 완수한적 있었는지 알아내야 하므로)

      - 객체가 주변 환경과의 상호작용에 어떻게 반응하는가(그 결과)는 '그 시점까지 객체에 어떤 일이 발생해왔느냐' 에 좌우됨.
        ex) 여행을 위해 비행기를 이용하려면(for), 탑승 전에 항공권을 발권했어야 한다(before).
            자판기에서 500원짜리 레쓰비를 클릭해서 뽑으려면(for), 자판기에 500원까지 동전을 투입했어야 한다(before).

    이러한 '선행사건'으로 있었어야할 사건들이 과연 있었었는지, 행동이력들을 보고 예측해야 하는 것이다 ('상태' 라는 개념지표가 없다면)

   -> 하지만 이는 굉장히 번거롭고 어렵다
      일반적으로 과거에 발생한 행동의 이력을 통해 현재 발생한 행동의 결과를 판단하는 방식은 (심플해보이지만서도 단순무식한 방법)
      복잡하고 번거로우며 이해하기 어렵다.
      -> 따라서 인간은 행동의 과정과 결과를 단순하게 기술하기 위해(예측할 수 있기 위해) '상태' 라는 개념을 고안했다.
        ex) 발권 상태 - 비행기 탑승 가능 여부는 '발권 상태'로 파악 가능
            운전 면허 - 운전 가능 여부는 '운전면허 소지여부'로 파악 가능

  => 이처럼 '상태(state)'를 이용하면 과거의 모든 행동 이력을 헤아리지 않고도 행동의 결과를 쉽게 예측하고 설명할 수 있다.
     즉 현재를 기반으로 객체의 행동방식을 이해할 수 있다.(행동결과를 예측할 수 있다)

     "상태는 근본적으로 세상의 복잡성을 완화하고 인지 과부하를 줄일 수 있는 중요한 개념이다."


 ■ 상태와 프로퍼티
  * 객체라고 할 수 있는 범위 : '객체'와 '값'의 구분 기준

  객체는 다음과 같은 특징을 갖고 있다
  - 객체는 뚜렷한 경계를 가지며, 식별 가능하고, 상태와 행동을 지닌다

  이 세상의 정말 많은 것을 객체라고 할 수 있다.
  이상한 나라의 앨리스 스토리에선
  앨리스, 케이크, 음료, 토끼, 문, 버섯, 부채 모두 '객체'라고 할 수 있다.
  이러한 것들은 뚜렷한 경계를 가지며, 식별 가능하고, 상태와 행동을 지니고 있다

  하지만 세상에 존재하는 모든 것들이 객체인 것은 아니다.
  분명히 인식할 수 있는 존재임에도 불구하고 객체의 영역에 포함시킬 수 없는 것들도 존재한다.
  - 앨리스의 '키', '위치'
  - 음료와 케이크의 '양'
  - '문이 열려있는지 여부'
  - 토끼가 달려가는 '속도'
   등 이렇게 "매우 구체적이고 상세하다 못해 원자적인 개념"들은 객체라고 포함시키지 않는다

   이러한 단순한 값(숙자,문자열,양,속도,시간,날짜,참/거짓)들은 객체가 아니다. (primitive data type 같은 것)
   이런 단순한 값들은 그 자체로 독립적인 의미를 가지기보다는 다른 객체의 특성을 표현하는데 (즉 다른 객체의 구성요소로서 존재하는데) 사용된다.
   : 즉 객체의 '상태'를 표현하기 위해 사용된다.
     - '앨리스의 키' : 앨리스의 객체의 '키'라는 상태 로 사용
     - '문의 개방 여부': 문 객체의 '개방여부'라는 상태(true/false)로 사용
     이런 단순한값들은 객체가 아니지만 객체의 상태를 표현하기 위한 중요한 수단이 된다.

   * '객체의 상태'로서의 '객체' : 객체의 상태로 '단순 값' 뿐 아니라, '객체' 역시 사용될 수 있다.
     때론 객체를 사용해 '다른 객체'의 '상태'를 표현해야 할 때가 있음
     (해당 객체의 멤버 필드가 '객체(참조 객체:reference object)'인 것)

     결론적으로 모든 객체의 '상태(state)'는 : 단순한 값과 객체의 조합으로 표현할 수 있다
     -> 이때 객체의 상태를 구성하는 모든 특징(상태값들)을 통틀어 객체의 '프로퍼티(property)'라고 한다.
     ex) 앨리스(앨리스객체)의 경우
        앨리스
         - 키(height)
         - 위치(location)                                 => 이 3가지가 '프로퍼티'가 됨
         - 음료(drink: '음료를 들고있는지 여부'가 되는것)

         앨리스의 프로퍼티 : 키,위치,음료

     * 프로퍼티(property)
      : 객체를 구성하는 모든 특징     (※ 링크(link)+속성(attribute))
       - 프로퍼티 : 그 특징의 그릇 자체; 일반적으로 변경되지 않고 고정되기 때문에 '정적'임
         (property)
       - 프로퍼티 값: 그릇안에 담긴 내용물; 시간이 흐름에 따라 변경됨, '동적'임
         (property value)

     * 링크(link)
      : 객체와 객체 사이의 의미 있는 연결을 링크라고 함
        객체와 객체 사이에는 링크가 존재해야만 요청을 보내고 받을 수 있음
        -> 즉, 객체의 링크를 통해서만 메시지를 주고받을 수 있다.

        - 링크는 객체가 다른 객체를 참조할 수 있다는 것을 의미함
        - 일반적으로 한 객체가 다른 객체의 식별자를 알고 있는 것으로 표현됨
        - 링크는 '속성(attribute)'와 더불어 '객체의 프로퍼티'를 이루는 구성요소의 한 축임

     * 속성(attribute)
      : (객체 간의 선으로 표현되는 링크와 달리) 객체를 구성하는 단순한 '값'
       ex) 앨리스의 '키', '위치'

     정리하면, (객체의) 프로퍼티는 "단순한 값인 속성과, 다른 객체를 가리키는 링크라는 두 가지 종류의 조합"이다.
     (정확하게 말하면 프로퍼티는 속성과 연관관계의 두 가지 종류로 구분된다. 연관관계는 정적인 관계를 의미하며, 링크는 연관관계의 인스턴스다.)

     ex) 객체를 이루는 모든 특징(속성+링크) = 프로퍼티
                           ⊃ 속성 : 객체의 단순한 구성요소 값
    '프로퍼티(property)'      ≠
                           ⊃ 링크 : 객체 간 연결


    *'객체의 상태(state)'
    : 상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적 특징을 표현한다.
      객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티값으로 구성된다.
      객체의 프로퍼티는 '단순한 값'과 다른 객체를 참조하는 '링크'로 구분할 수 있다.

      - 객체는 자율적인 존재다
      - 객체지향의 세계에서 객체는 다른 객체의 상태에 직접적으로 접근할 수도, 상태를 변경할 수도 없다.
      - 외부의 객체가 직접적으로 객체의 상태를 주무를 수 없으므로, 간접적으로 객체의 상태를 변경하거나 조회할 수 있는 방법이 있다.
       ex) 객체A가 객체B의 필드를 직접 접근할수 없으므로, 이를 위해 이용하는 Getter&Setter 메서드
       -> 이 방법이 바로 '행동' 임.
          - 행동은 다른 객체로 하여금 간접적으로 객체의 상태를 변경하는 걳을 가능하게 한다.
          - 객체지향의 기본 사상은 '상태와 상태를 조작하기 위한 행동을 하나의 단위로 묶는 것'
          - "객체는 스스로의 행동에 의해서만 상태가 변경되는 것을 보장함으로써 '객체의 자율성'을 유지" - (객체의 고유한 자율성)

  ■ 상태와 행동
   객체의 상태는 저절로 변경되지 않는다.
   객체의 상태를 변경하는 것은 객체의 자발적인 행동뿐이다.
    : 객체 상태 변경은 외부로 인해 일어나는게 아닌, 객체 내부 자신의 행동으로 인해 일어날 수 있다.

   - 객체가 취하는 행동은 객체 자신의 상태를 변경시킨다
   - 객체의 행동에 의해 객체 상태가 변경된다는 것은 행동이 '부수 효과(side effect)'초래한다는 것을 의미한다.
   - 부수효과의 개념을 이용하면 객체의 행동을 '상태 변경의 관점' 에서 쉽게 기술할 수 있다.
   - 객체의 행동은 객체의 상태를 변경시키지만 행동의 결과는 객체의 상태에 의존적이다.
     : 상태와 행동 사이에는 다음과 같은 관계가 있다
       -- 객체의 행동은 상태에 영향을 받는다 (객체 행동의 결과는 상태에 의존적이다)
       -- 객체의 행동은 상태를 변경시킨다 (객체의 행동의 결과로 상태는 변화한다)
         => 서로 영향을 주고받는다

         이는 '상태'라는 개념을 이용해 행동을 아래의 두 가지 관점에서 서술할 수 있음을 의미함
         - 상호작용이 현재의 상태에 어떤 방식으로 의존하는가
         - 상호작용이 어떻게 현재의 상태를 변경시키는가

         ex) 앨리스가 문을 통과하는 행동을 '상태' 관점에서 설명해보는 예시
            : 앨리스가 통과할 문의 크기가 40cm 라고 가정하면, 앨리스의 '키'와 '위치' 라는 두 상태를 이용해 간단히 서술 가능하다
            -- 앨리스의 키가 40cm 이하라면 문을 통과할 수 있다
            -- 문을 통과한 후에 앨리스의 위치는 아름다운 정원으로 바뀌어야 한다.

            ==> 이처럼 상태를 이용하면 복잡한 객체의 행동을 쉽게 이해(표현)할 수 있다.


  ■ 협력과 행동
   어떤 객도 섬이 아니다
   객체는 자신에게 주어진 책임을 완수하기 위해 다른 객체를 이용하고 다른 객체에게 서비스를 제공한다
   객체는 다른 객체와 적극적으로 상호작용하며 '협력하는 객체들의 공동체'에 참여하기 위해 노력한다.
   - 객체가 다른 객체와 협력하는 유일한 방법은 다른 객체에게 '요청'을 보내는 것이다
   - 요청을 수신한 객체는 요청을 처리하기 위해 적절한 방법(method)에 따라 행동한다
     -> 따라서 객체의 행동은 객체가 협력에 참여할 수 있는 유일한 방법이다.
   - 객체가 어떤 행동을 하도록 만드는 것은 객체가 외부로부터 수신한 메시지임
     -> 객체는 수신된 메시지에 따라 적절히 행동하면서 협력에 참여하고, 그 결과로 자신의 상태를 변경함.
   - 객체가 협력에 참여하는 과정에서 자기 자신의 상태 뿐만 아니라, 다른 객체의 상태 또한 변경을 유발할 수 있다.
     ex) 앨리스가 음료를 마시면 앨리스의 키가 작아지지만, 마신 음료의 양도 줄어야 한다.

     이에 따라 객체의 행동으로 인해 발생하는 결과는 아래 두 가지 관점에서 기술 가능하다
     (객체의 행동은 이 두 가지 관점의 부수효과를 명확하게 서술해야 함)
      - 객체 자신의 상태 변경
      - 행동 내에서 협력하는 다른 객체에 대한 메시지 전송

      *(이 책에서) '행동(bebavior)'의 정의
      : 행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다.
        행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다.
        객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야 한다.


  ■ 상태 캡슐화
    현실세계의 객체와 객체지향세계의 객체 사이에는 중대한 차이점이 있다
    전자는 스스로 무엇인가를 할 수 없는 존재로 사람이 어떤 작용을 가해주어야 어떤 결과가 일어나지만,
    후자는 스스로 무엇인가를 할 수 있고 모든 행동을 자율적으로 통제하는 자율적이고 독립적인 존재라는 것이다.

    - 객체지향 세계에서 모든 객체는 자신의 상태를 스스로 관리하는 자율적인 존재임
     : 앨리스 객체의 키를 작게 만드는 것이 앨리스 객체 자신인 것처럼, 음료 객체의 양을 줄이는 것은 음료객체 자신이어야 함.
       고로 앨리스 객체는 음료의 상태를 직접적으로 변경할 수 없음,
       단지 음료에게 '자신이 음료를 마셨다는 메시지'를 전달할 뿐임
       -> 그리고 적절할 정도로 음료의 양을 줄이는 것은 메시지를 전달받은 음료 객체 스스로의 몫임

       ex) 메시지를 통한 앨리스 객체와 음료 객체 사이의 협력 관계

                     drinkBeverage()                          drunken(quantity)
                -----------------------> '앨리스 Object' -------------------------> '음료 Object'
   ("너는 음료를 마셨다"는 message 전달)                  ("quantity 만큼 마셔졌다"는 message 전달)

    - 메시지를 앨리스에게 전송하는 객체이건 음료에게 메시지를 전송하는 앨리스 객체이건,
      메시지 송신자(발신자 객체)는 메시지 수신자의 상태변경에 대해서는 전혀 알지 못한다.
      --> 이것이 '캡슐화'가 의미하는 것임 : 캡슐안에 감춰놓은 것처럼 객체 안의 내용물에 대해서 외부에선 알지 못함

    - 캡슐화 하에서 객체는 상태를 캡슐 안에 감춰둔 채 외부로 노출하지 않는다.
    - 객체가 외부에 노출하는 것은 '행동'뿐이며, 외부에서 객체에 접근할 수 있는 방벙 역시 '행동' 뿐임
    - 객체의 행동을 유발하는 것은 외부로부터 전달된 메시지이지만, 객체의 상탵를 변경할지 여부는 객체 스스로 결정한다.
      송신자가 상태변경을 기대하더라도 수신자가 자신의 상태를 변경하지 않는다면 송신자가 간섭할 수 있는 어떤 여지도 없음.

    이처럼 "상태를 외부에 노춣시키지 않고 행동을 경계로 캡슐화하는 것"은 결과적으로 객체의 자율성을 높인다.
     -> 자율적인 객체는 스스로 판단하고 스스로 결정하기 때문에 객체의 자율성이 높아질수록 객체의 지능도 높아진다
     --> 협력에 참여하는 객체들의 지능(자율성)이 높아질수록 협력은 유연하고 간결해진다
     ---> [캡슐화를 해야 하는 이유]
          상태를 '잘 정의된 행동의 집합 뒤로 숨겨놓는 것(캡슐화하는 것)'은 객체의 자율성을 높이고,
          그럼으로써 협력을 단순하고 유연하게 만든다.
          이것이 캡슐화를 해야하는 이유이다.


  ■ 식별자
    서로 다른 객체는 구별할 수 있게 해주는 프로퍼티를 '식별자(Identifier)' 라고 한다.
    모든 객체는 식별자를 가지며 식별자를 이용해 객체를 구별할 수 있다.
    - 모든 객체가 식별자를 가진다는 것은 반대로 말하면 객체가 아닌 단순한 값은 식별자를 가지지 않는다는 것을 의미하기도 한다.
    - 객체와 값의 가장 큰 차이점은 식별자를 가지냐의 유무이다.
      그리고 시스템을 설계할 때는 이런 '단순한 값'과 '객체'의 '차이점'을 명확하게 구분하고 명시적으로 표현하는 것이 매우 중요하다.

    *값(value)
    : 숫자,문자열,날짜,시간,금액 등과같이 변하지 않는 양을 모델링한다.
     - 흔히 값의 상태는 변하지 않으므로 '불변 상태(immutable state)'를 가진다고 말함
     - 값의 경우 두 인스턴스의 상태가 같다면 두 인스턴스를 같은 것으로 판단함
       -> 이처럼 상태(값 자체 내용)을 이용해 두 값이 같은지 판단할 수 있는 성질을 '동등성(equality)' 이라고 한다.
     - 상태를 이용해 동등성을 판단할 수 있는 이유는 값의 상태가 변하지 않기 때문
       값의 상태는 결코 변하지 않음, 그러므로 어떤 시점에 동일한 타입의 두 값이 같다면 언제까지라도 두 값은 동등한 상태를 유지할 것임.
       -> 값은 오직 상태만을 이용해 동등성을 판단; 그렇기 때문에 인스턴스를 구별하기 위한 별도의 식별자를 필요로 하지 않음.

    *객체(object)
    : 객체는 시간에 따라 변경되는 상태를 포함하며, 행동을 통해 상태를 변경한다.
     - 객체는 상태가 변할 수 있으므로, '가변 상태(mutable state)'를 가진다고 함
     - 타입이 같은 두 객체의 상태(그 내용값)가 완전히 똑같더라도, 두 객체는 독립적인 별개의 객체로 간주해야 한다.
       (객체는 복제클론, 레플리칸트 같은 것이다; 동일한 구성요소로 이뤄진6666666 것이라도, 엄연히 구별할 수 있는, 구분될 수 있는 존재이다)
     - 객체는 사람과 유사하게 상태와 무관히 두 객체를 동일하거나 다르다고 판단할 수 있는 '프로퍼티'를 가진다.
       두 객체의 상태가(상태값이) 다르더라도 '식별자가 같다면' 두 객체를 동일한 객체로 판단할 수 있다.
        -> 이처럼 식별자를 기반으로 객체가 같은지를 판단할 수 있는 성질을 '동일성(identical)'이라고 한다.
     - 상태(state)를 기반으로 객체의 동일성을 판단할 수 없는 이뉴는 시간의 흐름에 따라 객체의 상태가 변하기 때문,
       즉 가변적은 객체의 상태는 판별의 기준이 못됨,
       -> 상태변경에 독립적인 별도의 '식별자'를 이용할 수 밖에 없는 것.

       "식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티다.
        값은 식별자를 가지지 않기 때문에 상태를 이용한 '동등성 검사'를 통해 두 인스턴스를 비교해야 한다.
        객체는 상태가 변경될수 있기 때문에 식별자를 이용한 '동일성 검사'를 통해 두 인스턴스의 동일여부를 판단할 수 있다."

     - 객체와 값은 각각을 별도로 지칭하는 용어가 존재한다
       -- 객체 : '참조 객체(reference object)' / '엔티티(entity)'
       -- 값 : '값 객체(value object)'

     * 다시 한번 정리하는 '객체'의 특성
      - 객체는 상태를 가지며 상태는 변경가능하다
      - 객체의 상태를 변경시키는 것은 객체의 행동이다
        행동의 결과는 상태에 의존적이며 상태를 이용해 서술할 수 있다
        행동의 순서가 실행 결과에 영향을 미친다
      - 객체는 어떤 상태에 있더라도 유일하게 식별 가능하다.


  ■ 기계로서의 객체
   : 객체는 '버튼이 있는 전자 탁상시계' 와 같은 '기계'로 비유할 수 있다.

       *객체지향프로그램에 대해 개발자들이 주로 하는 업무는 객체의 상태를 조회하고, 객체의 상태를 변경하는 것이다.
          - 객체의 상태를 조회하는 작업 : '쿼리(query)'
          - 객체의 상태를 변경하는 작업 : '명령(command)'
          이라고 일반적으로 표현한다.

    버트란드 마이어는 객체를 '차가운 금속 외피로 둘러싸인 블랙박스'와 같은 기계로서의 이미지로 비유했다.
    - '기계의 부품/내용' 은 단단한 금속 외피 안에 감춰져 있기에 -> 기계의 내부에 있는 부품을 직접 볼 수는 없음(기계를 분해하지 않는 한)
    - 기계 외부에 나와있는 '버튼'은 누르면 -> '기계 안의 내용'을 변경시킬 수 있음
      ==> 사람은 기계의 외부에 부착된 이러한 버튼을 통헤서만 기계와 상호작용할 수 있음
         ==> 객체가 이와 같음; (외부에서 : 외부객체에서) 한 객체 내부의 상태(내용)를 직접 볼 수 없다,
             대신 메서드(객체가 공개해놓은; Getter&Setter 등)를 통해서 객체에 메시지를 전달해 객체로 하여금 변경이 일어나도록 할 수 있다.
             - 위 경우에서 메서드는 기계의 버튼이며(Getter 메서드 : '조회(query)'기능 / Setter 메서드 : '명령(command)' 기능),
               멤버필드가 기계의 부품이다.
             - 단, 메시지를 보냈더라도 내용을 변경할지 말지/어떤 방식으로 동작할지 등은 객체 스스로가 결정함. (객체의 자율적 특성)

    - 외부에서 객체에 접근할 수 있는 유일한 방법은 객체가 제공하는 행동(메서드) 뿐이다.
      : 즉 사용자는 객체가 제공하는 명령 버튼과 쿼리 버튼으로 구성된 인터페이스(약속)를 통해서만 객체에 접근할 수 있다.

    - 객체 기계가 제공하는 버튼(객체가 외부에 공개해놓은 인터페이스)을 통해서만 상태에 접근할 수 있다는 점은 객체의 '캡슐화(Encapsulation)'를 강조한다.
    - (객체를 탁상시계와 같은 기계장치와 같다는 비유에서)
      객체 기계는 버튼으로 제공되는 '행동'과, 디스플레이에 출력되는 '상태'를 함께 가지고 있다
      상태는 버튼으로 인해 유발되는 행동에 의해서만 접근 가능하다.
      ->'상태와 행동이 하나의 단위'로 '캡슐화' 되어 있음
       --> 객체는 상태와 행동을 하나로 묶어 갖고 있다, 즉 둘을 하나의 단위로 캡슐화한다

    - 객체와 객체는 만약 서로 상태가 같다 하더라도 별개의 구분된 객체이다.
      ex) 만약 집에 다이소 탁상시계가 있는데
          똑같은 디자인, 모델, 색상에 구성요소까지 전부 똑같은 2개의 제품이 있다고 하자,
          시계A와 시계B는 똑같은 (내용[상태]의) 제품이지만, 서로 구분되는 '별개의' 제품(존재;객체)' 이다.
          => (일반 단순값과는 다르게) '객체'는 그 내용(상태) 가 동일하더라도 서로 다른 구분될 수가 있다.
             상태가 동일하더라도 (인간인 이상 그냥 바로 보면) 서로 구분이 가능하다.

    *이처럼 객체를 기계로서 바라보는 관점은 상태, 행동, 식별자에 대한 시각적인 이미지를 제공하고,
     캡슐화와 메시지를 통한 협력 관계를 매우 효과적으로 설명한다.


 ■ 행동이 상태를 결정한다

 객체지향 관점에서 객체를 바라볼 때, 객체를 '상태'를 중심으로 객체를 바라보는 것은 흔히 빠지기 쉬운 함정이다.
 객체를 '상태' 를 중심으로 생각하고 설계를 기획하는 것은 바람직하지 않다. 이는 설계에 '나쁜 영향' 을 초래한다.
 - 첫째, 상태를 먼저 결정할 경우 캡슐화가 저해된다
    : 상태에 초점을 맞출 경우 상태가 객체 내부로 깔끔하게 캡슐화되지 못하고 공용 인터페이스에 그대로 노출되버릴 확률이 높아짐
 - 둘째, 객체를 협력자가 아닌 고립된 섬으로 만든다
    : 객체가 필요한 이유는 애플리케이션의 문맥(context: 컨택스트) 내에서 다른 객체와 협력하기 위해서임,
      불행히도 상태를 먼저 고려하는 방식은 협력이란 문맥에서 멀리 벗어난 채 객체를 설계하는 쪽으로 흘러가기 굉장히 쉽고,
      그 결과 자연스럽게 협력에 적합하지 못한 객체를 창조하게 된다.
 - 셋째, 객체의 재사용성이 저하된다
    : 객체의 재사용성은 다양한 협력에 참여할 수 있는 능력에서 나옴,
      상태에 초점을 맞춘 객체는 다양한 협력에 참여하기 어렵다,
      따라서 객체의 재사용성이 저하될 수 밖에 없음.

 => "객체를 설계할 때는 '행동' 에 초점을 맞추어서 객체를 바라보고 설계해야 한다."
    - 객체의 행동은 객체가 협력에 참여하는 유일한 방법임
    - 객체가 적합한지를 결정하는 것은 그 객체의 상태가 아니라 객체의 '행동' 임.
    - 따라서 객체 설계자는 '협력의 문맥에 맞는 적절한 행동' 을 수행하는 객체를 발견하거나 창조해야 함.
     -> "결과적으로, 우리가 애플리케이션 안에서 어떤 행동을 원하느냐가, 어떤 객체가 적합한지를 결정한다."
        (객체의 적합성을 결정짓는 거은 상태가 아니라 객체의 행동인 것)
        (*어떤 객체에 대해 이게 과연 '적합한지' 를 결정하는 것은, '애플리케이션 안에서 어떤 행동을 원하는가' 라는 것)

  * 객체지향 설계
   객체지향 설계는
       1) 애플리케이션에 필요한 '협력'을 생각하고
       2) 협력에 참여하는 데 필요한 '행동'을 생각한 후
       3) 행동을 수행할 객체를 선택
   하는 방식으로 수행된다.
    - 행동을 결정한 후에야 행동에 필요한 정보가 무엇인지를 고려하게 되며, 이 과정에서 필요한 상태가 결정되는 것
      -> 따라서, '먼저 객체의 행동을 결정하고' 나서야, 그 후에 행동에 적절한 상태(행동이 수행되기 위해 있어야 할 상태)를 선택할 수 있는 것이다.

    - 협력 안에서 객체의 행동
     : 협력 안에서 객체의 행동이란 결국 객체가 협력에 참여하면서 완수해야 하는 책임을 의미함,
       고로 "어떤 책임이 필요한가"를 결정하는 과정이 전체 설계를 주도해야 함('책임-주도 설계(Responsibility-Driven Design, RDD)')
       -- 책임주도설계는 협력이란 문맥 안에서 객체의 행동을 생각하도록 도움으로써
          '응집도 높고 재사용 가능한 객체'를 만들 수 있게 한다.

       ★다시 한번 강조
       : "행동이 상태를 결정한다"
         객체를 바라볼 때 '행동' 을 중심으로 생각하고, 기획하고, 설계해서, 상태도 이에 기반해 만들고, 최종적으로 객체를 구현해야 한다.
         - 객체가 '무슨 행동을 수행해야 하는지' 가
           객체가 '무슨 상태를 보유하고 있어야 하는지' 를 결정한다

































