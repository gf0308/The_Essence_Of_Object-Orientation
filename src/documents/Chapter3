['객체지향의 사실과 오해' 학습 내용 정리]

3장 : 타입과 추상화

 ▣ 지하철과 지하철 노선도에 담겨 있는 추상화의 원리
  : 최초의 지하철은 1863년 영국 런던에서 개통됐다.
    초기의 지하철의 노선도는 실제와 유사한 물리적 지형 위에 구불구불한 운행 노선과 불규칙적인 역 간의 거리를 '사실 그대로' 묘사하고 있었다.
    근데 이런 (불필요한) 사실적은 노선도는 오히려 승객들로 하여금 지하철을 탈 때 노선을 이해하기 어렵게 만들었다.
    그러다가 해리 벡(Harry Beck)이 단순하고 실용적이면서도 심미적인 지하철 노선도를 만들면서 지금까지 사용되는 단순하고 직관적인 지하철 노선도가 나오게 됐다.

    지하철을 이용하는 승객의 '목적' 은 하나의 역에서 다른 역으로 이동하는 것으로, 어떤 역에서 출발해야 하는지, 어떤 역에서 환승해야 하는지, 어떤 역을 거쳐야
    가장 빠르고 쉽게 목적지에 도착하는지가 주요 관심사였다.
    이때 중요한 것은 얼마나 사실적으로 지형을 묘사했는지가 아닌, '역과 역 사이의 연결성이 얼마나 직관적이고 이해하기 쉽게' 잘 나타나있느냐 였던 것이다.
    해리 벡은 이 점만 강조해서 살린, 오늘날 우리가 보고 이용하는 심플한 노선도를 만들어냄으로써 기존의 복잡한 노선도를 '단순화' 하고 '직관화' 해 이용하기 쉽게 만들었다.
    => '본래의 목적' 과는 무관한 정보는 생략해버리고, 용도에 적합한 정보만을 살린 채로 최대한 단순화시킴 (추상화)

    "이처럼 해리 벡은 지하철을 이용하는 승객들을 면밀하게 관찰한 후 승객이 꼭 아랑야 하는 사실만 정확히 표현하고
    몰라도 되는 정보는 무시함으로써 이해하기 쉽고 단순하며 목적에 부합하는 지하철 노선도를 창조해낼 수 있었다."
    -> 해리 백의 가장 위대한 업적은 지하철 노선을 '추상화' 한 것.

    ※추상화
    : 현실의 대상을 좀더 이해하기 쉽게 만들기 위해, 용도/목적에 불필요한 요소는 의도적으로 생략하고 감춤으로써 단순화해
      복잡도를 극복하는 것


 ▣ 추상화를 통한 복잡성의 극복
  ■ 추상화
   : 현실의 대상을 좀더 이해하기 쉽게 만들기 위해, 용도/목적에 불필요한 요소는 의도적으로 생략하고 감춤으로써 단순화해 복잡도를 극복하는 것
   - 추상화는 복잡한 현실을 단순화하기 위해 사용하는 인간의 인지적 수단인 것

  ■ 추상화할 때 주의점
   : 추상화를 한 것이라고 해서 항상 모든 경우에 다 적합한 것은 아님
     용도, 목적이 적한한 경우에만 '추상화한 것' 이 실제로 효용이 있고 가치가 생김.
     -> "어떤 추상화도 의도된 목적이 아닌 다른 목적으로 사용된다면 오도될 수 있다." (원래 용도대로 쓰이는 게 아니라서 소용이 없거나 별 가치가 없어질 수 있다는 것)
        (추상화의 수준, 이익, 가치는 '목적' 에 의존적이다)

  ■ 추상화의 2가지 차원
   : 추상화는 두 차원에서 이뤄진다(by Kramer 2007)
   1) 일반화: 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만들기
   2) 불필요사항제거: 중요부분만 강조를 위해 불필요한 세부사항은 배제함으로써 단순하게 만들기

  * 객체지향 패러다임에서 '객체' 역시 추상화를 적용한 결과물로, 이를 통해 현실의 대상을 (현실의 복잡성을 극복한 채) 나타낸다.
  * 객체(Object) : 명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물


  ■ 개념(Concept)
   : 공통점을 기반으로 객체들을 묶기 위한 그릇
    - 개념을 이용하면 객체를 여러 그룹으로 분류(classification) 할 수 있음.
     □ 분류(Classification) : 개념에 따라 객체들을 여러 그룹으로 나누고 구분짓는 것
     □ 인스턴스(Instance) : 한 객체가 어느 객체그룹[개념]의 일원이 될 때, 그 객체는 그 개념의 인스턴스(Instance) 라고 함.

  ■ 개념을 이루는 3가지 관점
     1) 심볼(symbol): 개념을 가리키는 간략한 명칭
     2) 내연(intension): 개념의 완전한 정의
     3) 외연(extension): 개념에 속하는 모든 객체들의 집합

  ■ 객체를 분류하기 위한 틀 : '개념'
     개념은 결국 객체를 분류하기 위한 틀이 된다.
     외연의 관점에서 어떤 객체에 어떤 개념을 적용할 수 있다는 것은 -> 동일한 개념으로 구성된 객체 집합에 해당 객체를 포함시킨다는 것을 의미.
      -> "객체에 어떤 개념을 적용할 것인지를 결정하는 것 = 객체들을 개념에 따라 분류하는 것과 동일"
      => 따라서 '분류' 란 특정한 객체를 특정한 개념의 객체 집합에 포함시키거나/포함시키지 않는 작업을 의미한다.

     - 분류는 객체지향의 가장 중요한 개념 중 하나
     - "어떤 객체를 어떤 개념으로 분류할지가 객체지향의 품질을 결정한다"
       -> '적절하게 분류되어 있지 않은 객체들' 로 구성된 애플리케이션은, 유지보수가 어렵고 변화에 쉽게 대처하지 못함.

  ■ 분류는 추상화를 위한 도구다
   : '분류' 란 작업을 할 때
      우리는 자동적으로 추상화의 2가지 차원(공통점을 통한 일반화, 불필요사항제거)을
      사용해서 분류를 한다.
      -> 분류란 것 자체가 '추상화' 에 속하게 됨
       -> '분류' 는 추상화를 이뤄내는 한 가지 방법(도구) 란 것


 ▣ 타입
  ■ 타입은 개념이다
  : 타입(type)이란 말이 있다.
    이건 사실 개념(concept)와 동일하다; 즉 '타입 = 개념' 이다. 타입의 정의는 개념의 정의와 완전히 동일하다.
    다만 이를 좀더 컴퓨터 세계적 용어로 표현한 것이 '타입(Type)' 인 것이다.

    하지만 유의할 점이 있다,
    근본적으로 '개념' 과 동일하긴 하지만,
    (컴퓨터 내부에서) '타입' 이란 것은 좀 더 기계적인 의미의 윤색이 더해진 것이 있다.

  ■ 데이터 타입
   - 데이터타입의 정의
    : 메모리 안에 저장된 데이터의 종류를 분류하는 데 사용하는 메모리 집합에 관한 '메타데이터' 이다.
      (데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정)

  □ 데이터 타입이 있어야 하는 이유
  : 컴퓨터 안에선 데이터들에 타입(type)이 존재한다.
    컴퓨터안의 메모리 내부의 비트열을 직접 들여다 보면, 메모리 세상에는 이 데이터와 저 데이터가 어떻게 다른지 구분할 수 있는 어떤 질서/규칙도 없이
    단지 모든 데이터는 일련의 '0과 1의 비트열(bit string)' 로 구성되어 있다, 즉 타입이라는 질서가 없다.
    이러면 이 데이터를 어떻게 다뤄야 할지 알 수가 없고(문자열인지, 정수형인지 알수 없으면 어떤 연산자를 쓸지 결정할수도 없음)
    결국 멘붕에 빠진다.
    -> 이를 해결하기 위해 '타입 시스템(type system)' 이 자라났다.
       데이터를 목적에 따라 분류하는 것
       - 더하고 나누고 곱하고 뺄수있다면 : 정수형
       - 여러 문자로 구성돼있고 다른 문자와 연결될 수 있다면 : 문자열
       .... 식으로 '타입' 을 두고 분류하게 했다.
       => 이런 타입시스템의 목적은 "데이터가 잘못 사용되지 않도록 제약사항을 부과하는 것" 이다.

       * 타입에 대한 2가지 중요사항 (by Cardelli 1985)
       1) 타입은 데이터가 어떻게 사용되느냐('어떤 작업이 이뤄질수 있느냐')에 관한 것.
       2) 타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부에 철저히 감춰짐 ('타입에 속한 어떤 데이터가 메모리상에 표현될 때, 메모리 상에서 표현되어지는 매커니즘은 외부에 철저히 감춰져있음')


  ■ 객체와 타입
   객체에 타입을 부여하는 것도 위와 비슷한 원리가 적용된다.
   객체를 타입에 따라 분류하고 그 타입에 이름을 붙이는 것도 프로그램에서 사용할 새로운 데이터타입을 선언하는 것과 같다.

   □ 객체의 타입에 대한 2가지 중요사항
    1) 어떤 객체가 어떤 타입에 속하는지를 결정하는 것은, 객체가 어떤 행동을 수행하느냐 이다.('동일한 행동을 수행하는지')
    2) 객체의 내부적인 표현은 외부에 철저히 감춰진다.


  ■ 행동이 우선이다
   객체의 타입은 객체 내부 표현과는 아무 상관이 없음
   어떤 객체들이 동일하게 행동하기만 한다면 그 객체들은 동일한 타입에 속하는 것.
   => '동일한 책임' 을 수행하는 일련의 객체는 동일한 타입에 속한다.
   ex) 두 객체가 만약 같은 데이터를 갖고 있더라도, 다른 행동을 수행한다면 두 객체는 서로 다른 타입인 것이다.

   *다형성(polymorphism)
    같은 타입에 속한 객체는 행동만 동일하다면 서로 다른 데이터를 가질 수 있음
    -> 동일 행동 = 동일 책임 = 동일 메시지 수신
     -> 동일타입 객체는 (내부 데이터 표현 방식이 다르더라도) 동일 메시지를 수신하고 이를 처리할 수 있음
      -> 내부 표현방식은 다르기 때문에 동일 메시지를 처리하는 방식은 (객체 간) 서로 다를 수 있음
       -> '동일한 요청' 을 '서로 다른 방식으로' 처리해서 응답할 수 있음 : '다형성'
                                                           => '다형적 객체' 들은 동일한 타입(또는 타입 계층) 에 속할 수 있음.

   * 객체를 만들 때 가장 핵심적인 원칙
    - 객체를 결정하는 것은 행동이다 ((객체의 정체성/구조/타입 면에서)
    - 데이터는 단지 행동을 따를 뿐


 ▣ 타입의 계층
  ■ 트럼프 계층
   앨리스 이야기에서 '트럼프' 라고 표현된 객체들은, 사실 (진짜 트럼프와는 달리 사람처럼 걸어다니므로) '트럼프 인간' 타입이라고 불려야하는 객체들이다.
   즉 '트럼프 인간' 타입 이다.
   의미상으로 보면 '트럼프 인간' 은 '트럼프' 의 내연(intension)의 의미를 모두 만족하면서, '트럼프'에는 없는 인간처럼 걸을 수 있는 '걸어다닌다' 는 행동이 있다.
   -> 이 관점에서 '트럼프' 는 '트럼프 인간' 을 포괄하는 좀 더 일반적인 개념이다.
      '트럼프 인간' 은 '트럼프' 보다 좀 더 특화된 행동을 하는 특수한 개념이다.
      => 이 두 개념 사이의 관계를 '일반화(Generalization)/특수화(Specialization)' 관계 라고 함.
         그리고 이런 관계가 형성되는 두 타입은 '트럼프 계층' 임.

  ■ 일반화/특수화 관계
   이처럼 타입과 타입 사이에는 일반화/특수화 관계가 존재할 수 있다. 그리고 이런 관계가 성립되는 두 타입은 '계층' 을 형성한다.
   ex)
          트럼프                [general]
 (특수화)  ↓    ↑   (일반화)
         트럼프인간             [special]

   - 일반화와 특수화는 동시에 일어남
   - 객체지향에서 일반화/특수화 관계를 결정하는 것은, '객체의 행동' 이다. (객체의 상태를 표현하는 데이터가 아니라)
     즉 한 타입이 다른 타입보다 특수하게 행동하고, 반대의 타입은 다른 타입보다 더 일반적으로 행동할 때
     두 객체는 서로 간에 일반화/특수화 관계가 성립한다는 것.

    □ 일반적 타입
     - 행동의 가짓수(내연을 의미) : 적음
     - 집합의 크기(외연을 의미)   : 많음
    □ 특수한 타입
     - 행동의 가짓수(내연을 의미) : 많음
     - 집합의 크기(외연을 의미)   : 적음


  ■ 슈퍼타입과 서브타입
    좀더 일반적인 타입을 슈퍼타입(Supertype) 이라고 하고,
    좀더 특수한 타입을 서브타입(Subtype) 이라고 한다.

    * 어떤 타입이 다른 타입의 서브타입이 되기 위해 만족시켜야 할 조건 : '행위적 호환성'
     - 즉 A라는 타입이 B라는 타입이 하는 행동을 일단 자기가 다 할 수 있으면, A는 B의 서브타입이 될 수 있다!
       (일반적으로 서브타입은 슈퍼타입의 행위와 호환되기 때문에(슈퍼타입의 행위를 상속받음) 서브타입은 슈퍼타입을 대체할 수 있다)
     - 다시 말해 어떤 타입을 다른 타입의 서브타입이라고 말할 수 있으려면 다른 타입을 대체할 수 있어야 한다(by Liskov 1988)


  ■ (일반화/추상화 관계에서) '일반화' 는 추상화를 위한 도구다
   일반화/특수화 계층은 객체지향 패러다임에서 추상화의 두 번째 차원을 적절하게 활용한 대표적인 예다.
   엄밀히 말해 "트럼프 인간" 타입인 트럼프인간 객체들을 '트럼프일 뿐이야' 라고 묶어 표현한 것은,
   '불필요한 세부사항(인간처럼 걸어다님)은 배제하고 단순하게 만듬(트럼프 모습이므로 트럼프다)' 이란 추상화의 두번째 차원이 사용된 것.



















